$version Generated by VerilatedVcd $end
$date Tue Oct 15 15:37:40 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 C clock $end
  $var wire  1 E io_RegWrite $end
  $var wire 32 I io_WriteData [31:0] $end
  $var wire  5 H io_rd [4:0] $end
  $var wire 32 J io_rd1 [31:0] $end
  $var wire 32 K io_rd2 [31:0] $end
  $var wire  5 F io_rs1 [4:0] $end
  $var wire  5 G io_rs2 [4:0] $end
  $var wire  1 D reset $end
  $scope module RegFile $end
   $var wire  1 C clock $end
   $var wire  1 E io_RegWrite $end
   $var wire 32 I io_WriteData [31:0] $end
   $var wire  5 H io_rd [4:0] $end
   $var wire 32 J io_rd1 [31:0] $end
   $var wire 32 K io_rd2 [31:0] $end
   $var wire  5 F io_rs1 [4:0] $end
   $var wire  5 G io_rs2 [4:0] $end
   $var wire 32 # registers_0 [31:0] $end
   $var wire 32 $ registers_1 [31:0] $end
   $var wire 32 - registers_10 [31:0] $end
   $var wire 32 . registers_11 [31:0] $end
   $var wire 32 / registers_12 [31:0] $end
   $var wire 32 0 registers_13 [31:0] $end
   $var wire 32 1 registers_14 [31:0] $end
   $var wire 32 2 registers_15 [31:0] $end
   $var wire 32 3 registers_16 [31:0] $end
   $var wire 32 4 registers_17 [31:0] $end
   $var wire 32 5 registers_18 [31:0] $end
   $var wire 32 6 registers_19 [31:0] $end
   $var wire 32 % registers_2 [31:0] $end
   $var wire 32 7 registers_20 [31:0] $end
   $var wire 32 8 registers_21 [31:0] $end
   $var wire 32 9 registers_22 [31:0] $end
   $var wire 32 : registers_23 [31:0] $end
   $var wire 32 ; registers_24 [31:0] $end
   $var wire 32 < registers_25 [31:0] $end
   $var wire 32 = registers_26 [31:0] $end
   $var wire 32 > registers_27 [31:0] $end
   $var wire 32 ? registers_28 [31:0] $end
   $var wire 32 @ registers_29 [31:0] $end
   $var wire 32 & registers_3 [31:0] $end
   $var wire 32 A registers_30 [31:0] $end
   $var wire 32 B registers_31 [31:0] $end
   $var wire 32 ' registers_4 [31:0] $end
   $var wire 32 ( registers_5 [31:0] $end
   $var wire 32 ) registers_6 [31:0] $end
   $var wire 32 * registers_7 [31:0] $end
   $var wire 32 + registers_8 [31:0] $end
   $var wire 32 , registers_9 [31:0] $end
   $var wire  1 D reset $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
0C
1D
0E
b00000 F
b00000 G
b00000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
#1
1C
#2
0C
#3
1C
#4
0C
#5
1C
#6
0C
#7
1C
#8
0C
#9
1C
#10
0C
0D
1E
b00010 F
b00011 G
b00101 H
b00000000000000000000000000001010 I
#11
b00000000000000000000000000001010 (
1C
