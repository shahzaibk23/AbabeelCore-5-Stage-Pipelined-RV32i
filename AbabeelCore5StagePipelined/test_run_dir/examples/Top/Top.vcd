$version Generated by VerilatedVcd $end
$date Wed Jan 15 13:27:48 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 "* clock $end
  $var wire 32 ", io_main_RegOut [31:0] $end
  $var wire  1 "+ reset $end
  $scope module Top $end
   $var wire  1 "* Pc_clock $end
   $var wire 32 I Pc_io_input [31:0] $end
   $var wire 32 J Pc_io_pc [31:0] $end
   $var wire 32 I Pc_io_pc4 [31:0] $end
   $var wire  1 "+ Pc_reset $end
   $var wire  5 , aluControl_io_AluC [4:0] $end
   $var wire  3 & aluControl_io_AluOp [2:0] $end
   $var wire  3 D aluControl_io_Func3 [2:0] $end
   $var wire  1 E aluControl_io_Func7 $end
   $var wire  5 H alu_io_AluControl [4:0] $end
   $var wire 32 F alu_io_a [31:0] $end
   $var wire 32 G alu_io_b [31:0] $end
   $var wire 32 - alu_io_output [31:0] $end
   $var wire  1 "* clock $end
   $var wire  3 & control_io_AluOp [2:0] $end
   $var wire  2 ) control_io_ExtendSel [1:0] $end
   $var wire  1 $ control_io_MemRead $end
   $var wire  1 $ control_io_MemToReg $end
   $var wire  1 # control_io_MemWrite $end
   $var wire  7 : control_io_OpCode [6:0] $end
   $var wire  2 ' control_io_Operand_aSel [1:0] $end
   $var wire  1 ( control_io_Operand_bSel $end
   $var wire  1 % control_io_RegWrite $end
   $var wire  1 "* dataMem_clock $end
   $var wire 10 L dataMem_io_Address [9:0] $end
   $var wire 32 M dataMem_io_DataIn [31:0] $end
   $var wire 32 / dataMem_io_DataOut [31:0] $end
   $var wire  1 O dataMem_io_ld $end
   $var wire  1 N dataMem_io_str $end
   $var wire  1 "* exeMem_clock $end
   $var wire 32 - exeMem_io_aluOutput_in [31:0] $end
   $var wire 32 Y exeMem_io_aluOutput_out [31:0] $end
   $var wire  1 T exeMem_io_memRead_in $end
   $var wire  1 O exeMem_io_memRead_out $end
   $var wire  1 T exeMem_io_memToReg_in $end
   $var wire  1 O exeMem_io_memToReg_out $end
   $var wire  1 S exeMem_io_memWrite_in $end
   $var wire  1 N exeMem_io_memWrite_out $end
   $var wire  5 U exeMem_io_rd_in [4:0] $end
   $var wire  5 X exeMem_io_rd_out [4:0] $end
   $var wire  1 W exeMem_io_regWrite_in $end
   $var wire  1 Z exeMem_io_regWrite_out $end
   $var wire 32 V exeMem_io_strData_in [31:0] $end
   $var wire 32 M exeMem_io_strData_out [31:0] $end
   $var wire  1 "+ exeMem_reset $end
   $var wire  1 "* idExe_clock $end
   $var wire  5 , idExe_io_aluCtrl_in [4:0] $end
   $var wire  5 H idExe_io_aluCtrl_out [4:0] $end
   $var wire  1 $ idExe_io_memRead_in $end
   $var wire  1 T idExe_io_memRead_out $end
   $var wire  1 $ idExe_io_memToReg_in $end
   $var wire  1 T idExe_io_memToReg_out $end
   $var wire  1 # idExe_io_memWrite_in $end
   $var wire  1 S idExe_io_memWrite_out $end
   $var wire 32 0 idExe_io_operandA_in [31:0] $end
   $var wire 32 F idExe_io_operandA_out [31:0] $end
   $var wire 32 1 idExe_io_operandB_in [31:0] $end
   $var wire 32 G idExe_io_operandB_out [31:0] $end
   $var wire  5 R idExe_io_rd_in [4:0] $end
   $var wire  5 U idExe_io_rd_out [4:0] $end
   $var wire  1 % idExe_io_regWrite_in $end
   $var wire  1 W idExe_io_regWrite_out $end
   $var wire 32 + idExe_io_strData_in [31:0] $end
   $var wire 32 V idExe_io_strData_out [31:0] $end
   $var wire  1 "+ idExe_reset $end
   $var wire  1 "* ifId_clock $end
   $var wire 32 . ifId_io_ins_in [31:0] $end
   $var wire 32 @ ifId_io_ins_out [31:0] $end
   $var wire 32 I ifId_io_pc4_in [31:0] $end
   $var wire 32 Q ifId_io_pc4_out [31:0] $end
   $var wire 32 J ifId_io_pc_in [31:0] $end
   $var wire 32 P ifId_io_pc_out [31:0] $end
   $var wire  1 "+ ifId_reset $end
   $var wire 32 C immGen_io_I_Imm [31:0] $end
   $var wire 32 A immGen_io_S_Imm [31:0] $end
   $var wire 32 B immGen_io_U_Imm [31:0] $end
   $var wire 32 @ immGen_io_ins [31:0] $end
   $var wire  1 "* insMem_clock $end
   $var wire 32 . insMem_io_rData [31:0] $end
   $var wire 10 K insMem_io_wrAdder [9:0] $end
   $var wire 32 ", io_main_RegOut [31:0] $end
   $var wire  1 "* memWr_clock $end
   $var wire 32 Y memWr_io_aluOutput_in [31:0] $end
   $var wire 32 ] memWr_io_aluOutput_out [31:0] $end
   $var wire 32 / memWr_io_dataOut_in [31:0] $end
   $var wire 32 \ memWr_io_dataOut_out [31:0] $end
   $var wire  1 O memWr_io_memToReg_in $end
   $var wire  1 [ memWr_io_memToReg_out $end
   $var wire  5 X memWr_io_rd_in [4:0] $end
   $var wire  5 > memWr_io_rd_out [4:0] $end
   $var wire  1 Z memWr_io_regWrite_in $end
   $var wire  1 ; memWr_io_regWrite_out $end
   $var wire  1 "+ memWr_reset $end
   $var wire  1 "* regFile_clock $end
   $var wire  1 ; regFile_io_RegWrite $end
   $var wire 32 * regFile_io_WriteData [31:0] $end
   $var wire  5 > regFile_io_rd [4:0] $end
   $var wire 32 ? regFile_io_rd1 [31:0] $end
   $var wire 32 + regFile_io_rd2 [31:0] $end
   $var wire  5 < regFile_io_rs1 [4:0] $end
   $var wire  5 = regFile_io_rs2 [4:0] $end
   $var wire  1 "+ reset $end
   $scope module Pc $end
    $var wire  1 "* clock $end
    $var wire 32 I io_input [31:0] $end
    $var wire 32 J io_pc [31:0] $end
    $var wire 32 I io_pc4 [31:0] $end
    $var wire 32 J reg$ [31:0] $end
    $var wire  1 "+ reset $end
   $upscope $end
   $scope module alu $end
    $var wire  5 H io_AluControl [4:0] $end
    $var wire 32 F io_a [31:0] $end
    $var wire 32 G io_b [31:0] $end
    $var wire 32 - io_output [31:0] $end
   $upscope $end
   $scope module aluControl $end
    $var wire  5 , io_AluC [4:0] $end
    $var wire  3 & io_AluOp [2:0] $end
    $var wire  3 D io_Func3 [2:0] $end
    $var wire  1 E io_Func7 $end
   $upscope $end
   $scope module control $end
    $var wire  3 & CD_io_AluOp [2:0] $end
    $var wire  2 ) CD_io_ExtendSel [1:0] $end
    $var wire  1 5 CD_io_IType $end
    $var wire  1 7 CD_io_Jal $end
    $var wire  1 6 CD_io_Jalr $end
    $var wire  1 2 CD_io_Load $end
    $var wire  1 8 CD_io_Lui $end
    $var wire  1 $ CD_io_MemRead $end
    $var wire  1 $ CD_io_MemToReg $end
    $var wire  1 # CD_io_MemWrite $end
    $var wire  2 ' CD_io_Operand_aSel [1:0] $end
    $var wire  1 ( CD_io_Operand_bSel $end
    $var wire  1 ^ CD_io_RType $end
    $var wire  1 % CD_io_RegWrite $end
    $var wire  1 4 CD_io_SBType $end
    $var wire  1 3 CD_io_Store $end
    $var wire  1 4 ID_io_Branch $end
    $var wire  1 5 ID_io_IType $end
    $var wire  1 7 ID_io_Jal $end
    $var wire  1 6 ID_io_Jalr $end
    $var wire  1 2 ID_io_Load $end
    $var wire  1 8 ID_io_Lui $end
    $var wire  1 ^ ID_io_RType $end
    $var wire  1 3 ID_io_Store $end
    $var wire  7 : ID_io_opCode [6:0] $end
    $var wire  3 & io_AluOp [2:0] $end
    $var wire  2 ) io_ExtendSel [1:0] $end
    $var wire  1 $ io_MemRead $end
    $var wire  1 $ io_MemToReg $end
    $var wire  1 # io_MemWrite $end
    $var wire  7 : io_OpCode [6:0] $end
    $var wire  2 ' io_Operand_aSel [1:0] $end
    $var wire  1 ( io_Operand_bSel $end
    $var wire  1 % io_RegWrite $end
    $scope module CD $end
     $var wire  3 & io_AluOp [2:0] $end
     $var wire  2 ) io_ExtendSel [1:0] $end
     $var wire  1 5 io_IType $end
     $var wire  1 7 io_Jal $end
     $var wire  1 6 io_Jalr $end
     $var wire  1 2 io_Load $end
     $var wire  1 8 io_Lui $end
     $var wire  1 $ io_MemRead $end
     $var wire  1 $ io_MemToReg $end
     $var wire  1 # io_MemWrite $end
     $var wire  2 ' io_Operand_aSel [1:0] $end
     $var wire  1 ( io_Operand_bSel $end
     $var wire  1 ^ io_RType $end
     $var wire  1 % io_RegWrite $end
     $var wire  1 4 io_SBType $end
     $var wire  1 3 io_Store $end
    $upscope $end
    $scope module ID $end
     $var wire  1 4 io_Branch $end
     $var wire  1 5 io_IType $end
     $var wire  1 7 io_Jal $end
     $var wire  1 6 io_Jalr $end
     $var wire  1 2 io_Load $end
     $var wire  1 8 io_Lui $end
     $var wire  1 ^ io_RType $end
     $var wire  1 3 io_Store $end
     $var wire  7 : io_opCode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module dataMem $end
    $var wire  1 "* clock $end
    $var wire 10 "( dMem__T_20_addr [9:0] $end
    $var wire 10 "( dMem__T_20_addr_pipe_0 [9:0] $end
    $var wire 32 9 dMem__T_20_data [31:0] $end
    $var wire 10 L dMem__T_24_addr [9:0] $end
    $var wire 32 M dMem__T_24_data [31:0] $end
    $var wire  1 ") dMem__T_24_en $end
    $var wire  1 "- dMem__T_24_mask $end
    $var wire 10 L io_Address [9:0] $end
    $var wire 32 M io_DataIn [31:0] $end
    $var wire 32 / io_DataOut [31:0] $end
    $var wire  1 O io_ld $end
    $var wire  1 N io_str $end
   $upscope $end
   $scope module exeMem $end
    $var wire  1 "* clock $end
    $var wire 32 - io_aluOutput_in [31:0] $end
    $var wire 32 Y io_aluOutput_out [31:0] $end
    $var wire  1 T io_memRead_in $end
    $var wire  1 O io_memRead_out $end
    $var wire  1 T io_memToReg_in $end
    $var wire  1 O io_memToReg_out $end
    $var wire  1 S io_memWrite_in $end
    $var wire  1 N io_memWrite_out $end
    $var wire  5 U io_rd_in [4:0] $end
    $var wire  5 X io_rd_out [4:0] $end
    $var wire  1 W io_regWrite_in $end
    $var wire  1 Z io_regWrite_out $end
    $var wire 32 V io_strData_in [31:0] $end
    $var wire 32 M io_strData_out [31:0] $end
    $var wire 32 Y reg_aluOutput [31:0] $end
    $var wire  1 O reg_memRead $end
    $var wire  1 O reg_memToReg $end
    $var wire  1 N reg_memWrite $end
    $var wire  5 X reg_rd [4:0] $end
    $var wire  1 Z reg_regWrite $end
    $var wire 32 M reg_strData [31:0] $end
    $var wire  1 "+ reset $end
   $upscope $end
   $scope module idExe $end
    $var wire  1 "* clock $end
    $var wire  5 , io_aluCtrl_in [4:0] $end
    $var wire  5 H io_aluCtrl_out [4:0] $end
    $var wire  1 $ io_memRead_in $end
    $var wire  1 T io_memRead_out $end
    $var wire  1 $ io_memToReg_in $end
    $var wire  1 T io_memToReg_out $end
    $var wire  1 # io_memWrite_in $end
    $var wire  1 S io_memWrite_out $end
    $var wire 32 0 io_operandA_in [31:0] $end
    $var wire 32 F io_operandA_out [31:0] $end
    $var wire 32 1 io_operandB_in [31:0] $end
    $var wire 32 G io_operandB_out [31:0] $end
    $var wire  5 R io_rd_in [4:0] $end
    $var wire  5 U io_rd_out [4:0] $end
    $var wire  1 % io_regWrite_in $end
    $var wire  1 W io_regWrite_out $end
    $var wire 32 + io_strData_in [31:0] $end
    $var wire 32 V io_strData_out [31:0] $end
    $var wire  5 H reg_aluCtrl [4:0] $end
    $var wire  1 T reg_memRead $end
    $var wire  1 T reg_memToReg $end
    $var wire  1 S reg_memWrite $end
    $var wire 32 F reg_operandA [31:0] $end
    $var wire 32 G reg_operandB [31:0] $end
    $var wire  5 U reg_rd [4:0] $end
    $var wire  1 W reg_regWrite $end
    $var wire 32 V reg_strData [31:0] $end
    $var wire  1 "+ reset $end
   $upscope $end
   $scope module ifId $end
    $var wire  1 "* clock $end
    $var wire 32 . io_ins_in [31:0] $end
    $var wire 32 @ io_ins_out [31:0] $end
    $var wire 32 I io_pc4_in [31:0] $end
    $var wire 32 Q io_pc4_out [31:0] $end
    $var wire 32 J io_pc_in [31:0] $end
    $var wire 32 P io_pc_out [31:0] $end
    $var wire 32 @ reg_ins [31:0] $end
    $var wire 32 P reg_pc [31:0] $end
    $var wire 32 Q reg_pc4 [31:0] $end
    $var wire  1 "+ reset $end
   $upscope $end
   $scope module immGen $end
    $var wire  4 "" imm11 [3:0] $end
    $var wire  8 "# imm19 [7:0] $end
    $var wire  1 "$ imm20 $end
    $var wire  4 "% imm24 [3:0] $end
    $var wire  6 "& imm30 [5:0] $end
    $var wire  1 "' imm31 $end
    $var wire  1 "! imm7 $end
    $var wire 32 C io_I_Imm [31:0] $end
    $var wire 32 A io_S_Imm [31:0] $end
    $var wire 32 B io_U_Imm [31:0] $end
    $var wire 32 @ io_ins [31:0] $end
   $upscope $end
   $scope module insMem $end
    $var wire  1 "* clock $end
    $var wire 32 . io_rData [31:0] $end
    $var wire 10 K io_wrAdder [9:0] $end
    $var wire 10 K mem__T_11_addr [9:0] $end
    $var wire 32 . mem__T_11_data [31:0] $end
    $scope module BindsTo_0_InsMem_Inst $end
     $var wire  1 "* clock $end
     $var wire 32 . io_rData [31:0] $end
     $var wire 10 K io_wrAdder [9:0] $end
    $upscope $end
   $upscope $end
   $scope module memWr $end
    $var wire  1 "* clock $end
    $var wire 32 Y io_aluOutput_in [31:0] $end
    $var wire 32 ] io_aluOutput_out [31:0] $end
    $var wire 32 / io_dataOut_in [31:0] $end
    $var wire 32 \ io_dataOut_out [31:0] $end
    $var wire  1 O io_memToReg_in $end
    $var wire  1 [ io_memToReg_out $end
    $var wire  5 X io_rd_in [4:0] $end
    $var wire  5 > io_rd_out [4:0] $end
    $var wire  1 Z io_regWrite_in $end
    $var wire  1 ; io_regWrite_out $end
    $var wire 32 ] reg_aluOutput [31:0] $end
    $var wire 32 \ reg_dataOut [31:0] $end
    $var wire  1 [ reg_memToReg $end
    $var wire  5 > reg_rd [4:0] $end
    $var wire  1 ; reg_regWrite $end
    $var wire  1 "+ reset $end
   $upscope $end
   $scope module regFile $end
    $var wire  1 "* clock $end
    $var wire  1 ; io_RegWrite $end
    $var wire 32 * io_WriteData [31:0] $end
    $var wire  5 > io_rd [4:0] $end
    $var wire 32 ? io_rd1 [31:0] $end
    $var wire 32 + io_rd2 [31:0] $end
    $var wire  5 < io_rs1 [4:0] $end
    $var wire  5 = io_rs2 [4:0] $end
    $var wire 32 _ registers_0 [31:0] $end
    $var wire 32 ` registers_1 [31:0] $end
    $var wire 32 i registers_10 [31:0] $end
    $var wire 32 j registers_11 [31:0] $end
    $var wire 32 k registers_12 [31:0] $end
    $var wire 32 l registers_13 [31:0] $end
    $var wire 32 m registers_14 [31:0] $end
    $var wire 32 n registers_15 [31:0] $end
    $var wire 32 o registers_16 [31:0] $end
    $var wire 32 p registers_17 [31:0] $end
    $var wire 32 q registers_18 [31:0] $end
    $var wire 32 r registers_19 [31:0] $end
    $var wire 32 a registers_2 [31:0] $end
    $var wire 32 s registers_20 [31:0] $end
    $var wire 32 t registers_21 [31:0] $end
    $var wire 32 u registers_22 [31:0] $end
    $var wire 32 v registers_23 [31:0] $end
    $var wire 32 w registers_24 [31:0] $end
    $var wire 32 x registers_25 [31:0] $end
    $var wire 32 y registers_26 [31:0] $end
    $var wire 32 z registers_27 [31:0] $end
    $var wire 32 { registers_28 [31:0] $end
    $var wire 32 | registers_29 [31:0] $end
    $var wire 32 b registers_3 [31:0] $end
    $var wire 32 } registers_30 [31:0] $end
    $var wire 32 ~ registers_31 [31:0] $end
    $var wire 32 c registers_4 [31:0] $end
    $var wire 32 d registers_5 [31:0] $end
    $var wire 32 e registers_6 [31:0] $end
    $var wire 32 f registers_7 [31:0] $end
    $var wire 32 g registers_8 [31:0] $end
    $var wire 32 h registers_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b000 &
b00 '
0(
b00 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000011100000000000100010011 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
02
03
04
05
06
07
08
b00000000000000000000000000000000 9
b0000000 :
0;
b00000 <
b00000 =
b00000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b000 D
0E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000 H
b00000000000000000000000000000100 I
b00000000000000000000000000000000 J
b0000000000 K
b0000000000 L
b00000000000000000000000000000000 M
0N
0O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000 R
0S
0T
b00000 U
b00000000000000000000000000000000 V
0W
b00000 X
b00000000000000000000000000000000 Y
0Z
0[
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
0^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
0"!
b0000 ""
b00000000 "#
0"$
b0000 "%
b000000 "&
0"'
b0000000000 "(
0")
0"*
1"+
b00000000000000000000000000000000 ",
1"-
#1
1"*
#2
0"*
#3
1"*
#4
0"*
#5
1"*
#6
0"*
#7
1"*
#8
0"*
#9
1"*
#10
0"*
0"+
#11
1%
b001 &
1(
b00000000100000000000000110010011 .
b00000000000000000000000000000111 1
15
b0010011 :
b00111 =
b00000000011100000000000100010011 @
b00000000000000000000000000000010 A
b00000000011100000000000000000000 B
b00000000000000000000000000000111 C
b00000000000000000000000000001000 I
b00000000000000000000000000000100 J
b0000000001 K
b00000000000000000000000000000100 Q
b00010 R
b0001 ""
1"$
b0011 "%
1"*
#12
0"*
#13
b00000000000000000000000000000111 -
b00000000100100000000001000010011 .
b00000000000000000000000000001000 1
b01000 =
b00000000100000000000000110010011 @
b00000000000000000000000000000011 A
b00000000100000000000000000000000 B
b00000000000000000000000000001000 C
b00000000000000000000000000000111 G
b00000000000000000000000000001100 I
b00000000000000000000000000001000 J
b0000000010 K
b00000000000000000000000000000100 P
b00000000000000000000000000001000 Q
b00011 R
b00010 U
1W
1"!
0"$
b0100 "%
1"*
#14
0"*
#15
b00000000000000000000000000001000 -
b00000000011000000000001000010011 .
b00000000000000000000000000001001 1
b01001 =
b00000000100100000000001000010011 @
b00000000000000000000000000000100 A
b00000000100100000000000000000000 B
b00000000000000000000000000001001 C
b00000000000000000000000000001000 G
b00000000000000000000000000010000 I
b00000000000000000000000000001100 J
b0000000011 K
b0000000001 L
b00000000000000000000000000001000 P
b00000000000000000000000000001100 Q
b00100 R
b00011 U
b00010 X
b00000000000000000000000000000111 Y
1Z
0"!
b0010 ""
1"$
1"*
#16
0"*
#17
b00000000000000000000000000000111 *
b00000000000000000000000000001001 -
b00000000000000000000001000010011 .
b00000000000000000000000000000110 1
1;
b00110 =
b00010 >
b00000000011000000000001000010011 @
b00000000011000000000000000000000 B
b00000000000000000000000000000110 C
b00000000000000000000000000001001 G
b00000000000000000000000000010100 I
b00000000000000000000000000010000 J
b0000000100 K
b0000000010 L
b00000000000000000000000000001100 P
b00000000000000000000000000010000 Q
b00100 U
b00011 X
b00000000000000000000000000001000 Y
b00000000000000000000000000000111 ]
0"$
b0011 "%
1"*
b00000000000000000000000000000111 ",
#18
0"*
#19
b00000000000000000000000000001000 *
b00000000000000000000000000000110 -
b00000011011100000000001000010011 .
b00000000000000000000000000000000 1
b00000 =
b00011 >
b00000000000000000000001000010011 @
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000110 G
b00000000000000000000000000011000 I
b00000000000000000000000000010100 J
b0000000101 K
b00000000000000000000000000010000 P
b00000000000000000000000000010100 Q
b00100 X
b00000000000000000000000000001001 Y
b00000000000000000000000000001000 ]
b00000000000000000000000000000111 a
b0000 "%
1"*
b00000000000000000000000000001000 ",
#20
0"*
#21
b00000000000000000000000000001001 *
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000110111 1
b10111 =
b00100 >
b00000011011100000000001000010011 @
b00000000000000000000000000100100 A
b00000011011100000000000000000000 B
b00000000000000000000000000110111 C
b00000000000000000000000000000000 G
b00000000000000000000000000011100 I
b00000000000000000000000000011000 J
b0000000110 K
b0000000001 L
b00000000000000000000000000010100 P
b00000000000000000000000000011000 Q
b00000000000000000000000000000110 Y
b00000000000000000000000000001001 ]
b00000000000000000000000000001000 b
1"$
b1011 "%
b000001 "&
1"*
b00000000000000000000000000001001 ",
#22
0"*
#23
0%
b000 &
0(
b00000000000000000000000000000110 *
b00000000000000000000000000110111 -
b00000000000000000000000000000000 1
05
b0000000 :
b00000 =
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000110111 G
b00000000000000000000000000100000 I
b00000000000000000000000000011100 J
b0000000111 K
b0000000000 L
b00000000000000000000000000011000 P
b00000000000000000000000000011100 Q
b00000 R
b00000000000000000000000000000000 Y
b00000000000000000000000000000110 ]
b00000000000000000000000000001001 c
b0000 ""
0"$
b0000 "%
b000000 "&
1"*
b00000000000000000000000000000110 ",
#24
0"*
#25
b00000000000000000000000000000000 *
b00000000000000000000000000000000 -
b00000000000000000000000000000000 G
b00000000000000000000000000100100 I
b00000000000000000000000000100000 J
b0000001000 K
b0000001101 L
b00000000000000000000000000011100 P
b00000000000000000000000000100000 Q
b00000 U
0W
b00000000000000000000000000110111 Y
b00000000000000000000000000000000 ]
b00000000000000000000000000000110 c
1"*
b00000000000000000000000000000000 ",
#26
0"*
#27
b00000000000000000000000000110111 *
b00000000000000000000000000101000 I
b00000000000000000000000000100100 J
b0000001001 K
b0000000000 L
b00000000000000000000000000100000 P
b00000000000000000000000000100100 Q
b00000 X
b00000000000000000000000000000000 Y
0Z
b00000000000000000000000000110111 ]
b00000000000000000000000000000000 c
1"*
b00000000000000000000000000110111 ",
#28
0"*
#29
b00000000000000000000000000000000 *
0;
b00000 >
b00000000000000000000000000101100 I
b00000000000000000000000000101000 J
b0000001010 K
b00000000000000000000000000100100 P
b00000000000000000000000000101000 Q
b00000000000000000000000000000000 ]
b00000000000000000000000000110111 c
1"*
b00000000000000000000000000000000 ",
#30
0"*
#31
b00000000000000000000000000110000 I
b00000000000000000000000000101100 J
b0000001011 K
b00000000000000000000000000101000 P
b00000000000000000000000000101100 Q
1"*
#32
0"*
#33
b00000000000000000000000000110100 I
b00000000000000000000000000110000 J
b0000001100 K
b00000000000000000000000000101100 P
b00000000000000000000000000110000 Q
1"*
#34
0"*
#35
b00000000000000000000000000111000 I
b00000000000000000000000000110100 J
b0000001101 K
b00000000000000000000000000110000 P
b00000000000000000000000000110100 Q
1"*
#36
0"*
#37
b00000000000000000000000000111100 I
b00000000000000000000000000111000 J
b0000001110 K
b00000000000000000000000000110100 P
b00000000000000000000000000111000 Q
1"*
#38
0"*
#39
b00000000000000000000000001000000 I
b00000000000000000000000000111100 J
b0000001111 K
b00000000000000000000000000111000 P
b00000000000000000000000000111100 Q
1"*
#40
0"*
#41
b00000000000000000000000001000100 I
b00000000000000000000000001000000 J
b0000010000 K
b00000000000000000000000000111100 P
b00000000000000000000000001000000 Q
1"*
#42
0"*
#43
b00000000000000000000000001001000 I
b00000000000000000000000001000100 J
b0000010001 K
b00000000000000000000000001000000 P
b00000000000000000000000001000100 Q
1"*
#44
0"*
#45
b00000000000000000000000001001100 I
b00000000000000000000000001001000 J
b0000010010 K
b00000000000000000000000001000100 P
b00000000000000000000000001001000 Q
1"*
#46
0"*
#47
b00000000000000000000000001010000 I
b00000000000000000000000001001100 J
b0000010011 K
b00000000000000000000000001001000 P
b00000000000000000000000001001100 Q
1"*
#48
0"*
#49
b00000000000000000000000001010100 I
b00000000000000000000000001010000 J
b0000010100 K
b00000000000000000000000001001100 P
b00000000000000000000000001010000 Q
1"*
#50
0"*
#51
b00000000000000000000000001011000 I
b00000000000000000000000001010100 J
b0000010101 K
b00000000000000000000000001010000 P
b00000000000000000000000001010100 Q
1"*
#52
0"*
#53
b00000000000000000000000001011100 I
b00000000000000000000000001011000 J
b0000010110 K
b00000000000000000000000001010100 P
b00000000000000000000000001011000 Q
1"*
#54
0"*
#55
b00000000000000000000000001100000 I
b00000000000000000000000001011100 J
b0000010111 K
b00000000000000000000000001011000 P
b00000000000000000000000001011100 Q
1"*
#56
0"*
#57
b00000000000000000000000001100100 I
b00000000000000000000000001100000 J
b0000011000 K
b00000000000000000000000001011100 P
b00000000000000000000000001100000 Q
1"*
#58
0"*
#59
b00000000000000000000000001101000 I
b00000000000000000000000001100100 J
b0000011001 K
b00000000000000000000000001100000 P
b00000000000000000000000001100100 Q
1"*
#60
0"*
#61
b00000000000000000000000001101100 I
b00000000000000000000000001101000 J
b0000011010 K
b00000000000000000000000001100100 P
b00000000000000000000000001101000 Q
1"*
#62
0"*
#63
b00000000000000000000000001110000 I
b00000000000000000000000001101100 J
b0000011011 K
b00000000000000000000000001101000 P
b00000000000000000000000001101100 Q
1"*
#64
0"*
#65
b00000000000000000000000001110100 I
b00000000000000000000000001110000 J
b0000011100 K
b00000000000000000000000001101100 P
b00000000000000000000000001110000 Q
1"*
#66
0"*
#67
b00000000000000000000000001111000 I
b00000000000000000000000001110100 J
b0000011101 K
b00000000000000000000000001110000 P
b00000000000000000000000001110100 Q
1"*
#68
0"*
#69
b00000000000000000000000001111100 I
b00000000000000000000000001111000 J
b0000011110 K
b00000000000000000000000001110100 P
b00000000000000000000000001111000 Q
1"*
#70
0"*
#71
b00000000000000000000000010000000 I
b00000000000000000000000001111100 J
b0000011111 K
b00000000000000000000000001111000 P
b00000000000000000000000001111100 Q
1"*
#72
0"*
#73
b00000000000000000000000010000100 I
b00000000000000000000000010000000 J
b0000100000 K
b00000000000000000000000001111100 P
b00000000000000000000000010000000 Q
1"*
#74
0"*
#75
b00000000000000000000000010001000 I
b00000000000000000000000010000100 J
b0000100001 K
b00000000000000000000000010000000 P
b00000000000000000000000010000100 Q
1"*
#76
0"*
#77
b00000000000000000000000010001100 I
b00000000000000000000000010001000 J
b0000100010 K
b00000000000000000000000010000100 P
b00000000000000000000000010001000 Q
1"*
#78
0"*
#79
b00000000000000000000000010010000 I
b00000000000000000000000010001100 J
b0000100011 K
b00000000000000000000000010001000 P
b00000000000000000000000010001100 Q
1"*
#80
0"*
#81
b00000000000000000000000010010100 I
b00000000000000000000000010010000 J
b0000100100 K
b00000000000000000000000010001100 P
b00000000000000000000000010010000 Q
1"*
#82
0"*
#83
b00000000000000000000000010011000 I
b00000000000000000000000010010100 J
b0000100101 K
b00000000000000000000000010010000 P
b00000000000000000000000010010100 Q
1"*
#84
0"*
#85
b00000000000000000000000010011100 I
b00000000000000000000000010011000 J
b0000100110 K
b00000000000000000000000010010100 P
b00000000000000000000000010011000 Q
1"*
#86
0"*
#87
b00000000000000000000000010100000 I
b00000000000000000000000010011100 J
b0000100111 K
b00000000000000000000000010011000 P
b00000000000000000000000010011100 Q
1"*
#88
0"*
#89
b00000000000000000000000010100100 I
b00000000000000000000000010100000 J
b0000101000 K
b00000000000000000000000010011100 P
b00000000000000000000000010100000 Q
1"*
#90
0"*
#91
b00000000000000000000000010101000 I
b00000000000000000000000010100100 J
b0000101001 K
b00000000000000000000000010100000 P
b00000000000000000000000010100100 Q
1"*
#92
0"*
#93
b00000000000000000000000010101100 I
b00000000000000000000000010101000 J
b0000101010 K
b00000000000000000000000010100100 P
b00000000000000000000000010101000 Q
1"*
#94
0"*
#95
b00000000000000000000000010110000 I
b00000000000000000000000010101100 J
b0000101011 K
b00000000000000000000000010101000 P
b00000000000000000000000010101100 Q
1"*
#96
0"*
#97
b00000000000000000000000010110100 I
b00000000000000000000000010110000 J
b0000101100 K
b00000000000000000000000010101100 P
b00000000000000000000000010110000 Q
1"*
#98
0"*
#99
b00000000000000000000000010111000 I
b00000000000000000000000010110100 J
b0000101101 K
b00000000000000000000000010110000 P
b00000000000000000000000010110100 Q
1"*
#100
0"*
#101
b00000000000000000000000010111100 I
b00000000000000000000000010111000 J
b0000101110 K
b00000000000000000000000010110100 P
b00000000000000000000000010111000 Q
1"*
#102
0"*
#103
b00000000000000000000000011000000 I
b00000000000000000000000010111100 J
b0000101111 K
b00000000000000000000000010111000 P
b00000000000000000000000010111100 Q
1"*
#104
0"*
#105
b00000000000000000000000011000100 I
b00000000000000000000000011000000 J
b0000110000 K
b00000000000000000000000010111100 P
b00000000000000000000000011000000 Q
1"*
#106
0"*
#107
b00000000000000000000000011001000 I
b00000000000000000000000011000100 J
b0000110001 K
b00000000000000000000000011000000 P
b00000000000000000000000011000100 Q
1"*
#108
0"*
#109
b00000000000000000000000011001100 I
b00000000000000000000000011001000 J
b0000110010 K
b00000000000000000000000011000100 P
b00000000000000000000000011001000 Q
1"*
