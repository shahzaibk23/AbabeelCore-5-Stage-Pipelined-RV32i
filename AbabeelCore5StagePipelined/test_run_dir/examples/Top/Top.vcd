$version Generated by VerilatedVcd $end
$date Wed Jan  1 01:58:02 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 "' clock $end
  $var wire 32 ") io_main_RegOut [31:0] $end
  $var wire  1 "( reset $end
  $scope module Top $end
   $var wire  1 "' Pc_clock $end
   $var wire 32 H Pc_io_input [31:0] $end
   $var wire 32 I Pc_io_pc [31:0] $end
   $var wire 32 H Pc_io_pc4 [31:0] $end
   $var wire  5 , aluControl_io_AluC [4:0] $end
   $var wire  3 & aluControl_io_AluOp [2:0] $end
   $var wire  3 C aluControl_io_Func3 [2:0] $end
   $var wire  1 D aluControl_io_Func7 $end
   $var wire  5 G alu_io_AluControl [4:0] $end
   $var wire 32 E alu_io_a [31:0] $end
   $var wire 32 F alu_io_b [31:0] $end
   $var wire 32 - alu_io_output [31:0] $end
   $var wire  1 "' clock $end
   $var wire  3 & control_io_AluOp [2:0] $end
   $var wire  2 ) control_io_ExtendSel [1:0] $end
   $var wire  1 $ control_io_MemRead $end
   $var wire  1 $ control_io_MemToReg $end
   $var wire  1 # control_io_MemWrite $end
   $var wire  7 : control_io_OpCode [6:0] $end
   $var wire  2 ' control_io_Operand_aSel [1:0] $end
   $var wire  1 ( control_io_Operand_bSel $end
   $var wire  1 % control_io_RegWrite $end
   $var wire  1 "' dataMem_clock $end
   $var wire 10 K dataMem_io_Address [9:0] $end
   $var wire 32 L dataMem_io_DataIn [31:0] $end
   $var wire 32 / dataMem_io_DataOut [31:0] $end
   $var wire  1 N dataMem_io_ld $end
   $var wire  1 M dataMem_io_str $end
   $var wire  1 "' exeMem_clock $end
   $var wire 32 - exeMem_io_aluOutput_in [31:0] $end
   $var wire 32 W exeMem_io_aluOutput_out [31:0] $end
   $var wire  1 S exeMem_io_memRead_in $end
   $var wire  1 N exeMem_io_memRead_out $end
   $var wire  1 S exeMem_io_memToReg_in $end
   $var wire  1 N exeMem_io_memToReg_out $end
   $var wire  1 R exeMem_io_memWrite_in $end
   $var wire  1 M exeMem_io_memWrite_out $end
   $var wire  5 T exeMem_io_rd_in [4:0] $end
   $var wire  5 V exeMem_io_rd_out [4:0] $end
   $var wire 32 U exeMem_io_strData_in [31:0] $end
   $var wire 32 L exeMem_io_strData_out [31:0] $end
   $var wire  1 "( exeMem_reset $end
   $var wire  1 "' idExe_clock $end
   $var wire  5 , idExe_io_aluCtrl_in [4:0] $end
   $var wire  5 G idExe_io_aluCtrl_out [4:0] $end
   $var wire  1 $ idExe_io_memRead_in $end
   $var wire  1 S idExe_io_memRead_out $end
   $var wire  1 $ idExe_io_memToReg_in $end
   $var wire  1 S idExe_io_memToReg_out $end
   $var wire  1 # idExe_io_memWrite_in $end
   $var wire  1 R idExe_io_memWrite_out $end
   $var wire 32 0 idExe_io_operandA_in [31:0] $end
   $var wire 32 E idExe_io_operandA_out [31:0] $end
   $var wire 32 1 idExe_io_operandB_in [31:0] $end
   $var wire 32 F idExe_io_operandB_out [31:0] $end
   $var wire  5 Q idExe_io_rd_in [4:0] $end
   $var wire  5 T idExe_io_rd_out [4:0] $end
   $var wire 32 + idExe_io_strData_in [31:0] $end
   $var wire 32 U idExe_io_strData_out [31:0] $end
   $var wire  1 "( idExe_reset $end
   $var wire  1 "' ifId_clock $end
   $var wire 32 . ifId_io_ins_in [31:0] $end
   $var wire 32 ? ifId_io_ins_out [31:0] $end
   $var wire 32 H ifId_io_pc4_in [31:0] $end
   $var wire 32 P ifId_io_pc4_out [31:0] $end
   $var wire 32 I ifId_io_pc_in [31:0] $end
   $var wire 32 O ifId_io_pc_out [31:0] $end
   $var wire  1 "( ifId_reset $end
   $var wire 32 B immGen_io_I_Imm [31:0] $end
   $var wire 32 @ immGen_io_S_Imm [31:0] $end
   $var wire 32 A immGen_io_U_Imm [31:0] $end
   $var wire 32 ? immGen_io_ins [31:0] $end
   $var wire  1 "' insMem_clock $end
   $var wire 32 . insMem_io_rData [31:0] $end
   $var wire 10 J insMem_io_wrAdder [9:0] $end
   $var wire 32 ") io_main_RegOut [31:0] $end
   $var wire  1 "' memWr_clock $end
   $var wire 32 W memWr_io_aluOutput_in [31:0] $end
   $var wire 32 Z memWr_io_aluOutput_out [31:0] $end
   $var wire 32 / memWr_io_dataOut_in [31:0] $end
   $var wire 32 Y memWr_io_dataOut_out [31:0] $end
   $var wire  1 N memWr_io_memToReg_in $end
   $var wire  1 X memWr_io_memToReg_out $end
   $var wire  5 V memWr_io_rd_in [4:0] $end
   $var wire  5 = memWr_io_rd_out [4:0] $end
   $var wire  1 "( memWr_reset $end
   $var wire  1 "' regFile_clock $end
   $var wire  1 % regFile_io_RegWrite $end
   $var wire 32 * regFile_io_WriteData [31:0] $end
   $var wire  5 = regFile_io_rd [4:0] $end
   $var wire 32 > regFile_io_rd1 [31:0] $end
   $var wire 32 + regFile_io_rd2 [31:0] $end
   $var wire  5 ; regFile_io_rs1 [4:0] $end
   $var wire  5 < regFile_io_rs2 [4:0] $end
   $var wire  1 "( reset $end
   $scope module Pc $end
    $var wire  1 "' clock $end
    $var wire 32 H io_input [31:0] $end
    $var wire 32 I io_pc [31:0] $end
    $var wire 32 H io_pc4 [31:0] $end
    $var wire 32 I reg$ [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire  5 G io_AluControl [4:0] $end
    $var wire 32 E io_a [31:0] $end
    $var wire 32 F io_b [31:0] $end
    $var wire 32 - io_output [31:0] $end
   $upscope $end
   $scope module aluControl $end
    $var wire  5 , io_AluC [4:0] $end
    $var wire  3 & io_AluOp [2:0] $end
    $var wire  3 C io_Func3 [2:0] $end
    $var wire  1 D io_Func7 $end
   $upscope $end
   $scope module control $end
    $var wire  3 & CD_io_AluOp [2:0] $end
    $var wire  2 ) CD_io_ExtendSel [1:0] $end
    $var wire  1 5 CD_io_IType $end
    $var wire  1 7 CD_io_Jal $end
    $var wire  1 6 CD_io_Jalr $end
    $var wire  1 2 CD_io_Load $end
    $var wire  1 8 CD_io_Lui $end
    $var wire  1 $ CD_io_MemRead $end
    $var wire  1 $ CD_io_MemToReg $end
    $var wire  1 # CD_io_MemWrite $end
    $var wire  2 ' CD_io_Operand_aSel [1:0] $end
    $var wire  1 ( CD_io_Operand_bSel $end
    $var wire  1 [ CD_io_RType $end
    $var wire  1 % CD_io_RegWrite $end
    $var wire  1 4 CD_io_SBType $end
    $var wire  1 3 CD_io_Store $end
    $var wire  1 4 ID_io_Branch $end
    $var wire  1 5 ID_io_IType $end
    $var wire  1 7 ID_io_Jal $end
    $var wire  1 6 ID_io_Jalr $end
    $var wire  1 2 ID_io_Load $end
    $var wire  1 8 ID_io_Lui $end
    $var wire  1 [ ID_io_RType $end
    $var wire  1 3 ID_io_Store $end
    $var wire  7 : ID_io_opCode [6:0] $end
    $var wire  3 & io_AluOp [2:0] $end
    $var wire  2 ) io_ExtendSel [1:0] $end
    $var wire  1 $ io_MemRead $end
    $var wire  1 $ io_MemToReg $end
    $var wire  1 # io_MemWrite $end
    $var wire  7 : io_OpCode [6:0] $end
    $var wire  2 ' io_Operand_aSel [1:0] $end
    $var wire  1 ( io_Operand_bSel $end
    $var wire  1 % io_RegWrite $end
    $scope module CD $end
     $var wire  3 & io_AluOp [2:0] $end
     $var wire  2 ) io_ExtendSel [1:0] $end
     $var wire  1 5 io_IType $end
     $var wire  1 7 io_Jal $end
     $var wire  1 6 io_Jalr $end
     $var wire  1 2 io_Load $end
     $var wire  1 8 io_Lui $end
     $var wire  1 $ io_MemRead $end
     $var wire  1 $ io_MemToReg $end
     $var wire  1 # io_MemWrite $end
     $var wire  2 ' io_Operand_aSel [1:0] $end
     $var wire  1 ( io_Operand_bSel $end
     $var wire  1 [ io_RType $end
     $var wire  1 % io_RegWrite $end
     $var wire  1 4 io_SBType $end
     $var wire  1 3 io_Store $end
    $upscope $end
    $scope module ID $end
     $var wire  1 4 io_Branch $end
     $var wire  1 5 io_IType $end
     $var wire  1 7 io_Jal $end
     $var wire  1 6 io_Jalr $end
     $var wire  1 2 io_Load $end
     $var wire  1 8 io_Lui $end
     $var wire  1 [ io_RType $end
     $var wire  1 3 io_Store $end
     $var wire  7 : io_opCode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module dataMem $end
    $var wire  1 "' clock $end
    $var wire 10 "% dMem__T_20_addr [9:0] $end
    $var wire 10 "% dMem__T_20_addr_pipe_0 [9:0] $end
    $var wire 32 9 dMem__T_20_data [31:0] $end
    $var wire 10 K dMem__T_24_addr [9:0] $end
    $var wire 32 L dMem__T_24_data [31:0] $end
    $var wire  1 "& dMem__T_24_en $end
    $var wire  1 "* dMem__T_24_mask $end
    $var wire 10 K io_Address [9:0] $end
    $var wire 32 L io_DataIn [31:0] $end
    $var wire 32 / io_DataOut [31:0] $end
    $var wire  1 N io_ld $end
    $var wire  1 M io_str $end
   $upscope $end
   $scope module exeMem $end
    $var wire  1 "' clock $end
    $var wire 32 - io_aluOutput_in [31:0] $end
    $var wire 32 W io_aluOutput_out [31:0] $end
    $var wire  1 S io_memRead_in $end
    $var wire  1 N io_memRead_out $end
    $var wire  1 S io_memToReg_in $end
    $var wire  1 N io_memToReg_out $end
    $var wire  1 R io_memWrite_in $end
    $var wire  1 M io_memWrite_out $end
    $var wire  5 T io_rd_in [4:0] $end
    $var wire  5 V io_rd_out [4:0] $end
    $var wire 32 U io_strData_in [31:0] $end
    $var wire 32 L io_strData_out [31:0] $end
    $var wire 32 W reg_aluOutput [31:0] $end
    $var wire  1 N reg_memRead $end
    $var wire  1 N reg_memToReg $end
    $var wire  1 M reg_memWrite $end
    $var wire  5 V reg_rd [4:0] $end
    $var wire 32 L reg_strData [31:0] $end
    $var wire  1 "( reset $end
   $upscope $end
   $scope module idExe $end
    $var wire  1 "' clock $end
    $var wire  5 , io_aluCtrl_in [4:0] $end
    $var wire  5 G io_aluCtrl_out [4:0] $end
    $var wire  1 $ io_memRead_in $end
    $var wire  1 S io_memRead_out $end
    $var wire  1 $ io_memToReg_in $end
    $var wire  1 S io_memToReg_out $end
    $var wire  1 # io_memWrite_in $end
    $var wire  1 R io_memWrite_out $end
    $var wire 32 0 io_operandA_in [31:0] $end
    $var wire 32 E io_operandA_out [31:0] $end
    $var wire 32 1 io_operandB_in [31:0] $end
    $var wire 32 F io_operandB_out [31:0] $end
    $var wire  5 Q io_rd_in [4:0] $end
    $var wire  5 T io_rd_out [4:0] $end
    $var wire 32 + io_strData_in [31:0] $end
    $var wire 32 U io_strData_out [31:0] $end
    $var wire  5 G reg_aluCtrl [4:0] $end
    $var wire  1 S reg_memRead $end
    $var wire  1 S reg_memToReg $end
    $var wire  1 R reg_memWrite $end
    $var wire 32 E reg_operandA [31:0] $end
    $var wire 32 F reg_operandB [31:0] $end
    $var wire  5 T reg_rd [4:0] $end
    $var wire 32 U reg_strData [31:0] $end
    $var wire  1 "( reset $end
   $upscope $end
   $scope module ifId $end
    $var wire  1 "' clock $end
    $var wire 32 . io_ins_in [31:0] $end
    $var wire 32 ? io_ins_out [31:0] $end
    $var wire 32 H io_pc4_in [31:0] $end
    $var wire 32 P io_pc4_out [31:0] $end
    $var wire 32 I io_pc_in [31:0] $end
    $var wire 32 O io_pc_out [31:0] $end
    $var wire 32 ? reg_ins [31:0] $end
    $var wire 32 O reg_pc [31:0] $end
    $var wire 32 P reg_pc4 [31:0] $end
    $var wire  1 "( reset $end
   $upscope $end
   $scope module immGen $end
    $var wire  4 } imm11 [3:0] $end
    $var wire  8 ~ imm19 [7:0] $end
    $var wire  1 "! imm20 $end
    $var wire  4 "" imm24 [3:0] $end
    $var wire  6 "# imm30 [5:0] $end
    $var wire  1 "$ imm31 $end
    $var wire  1 | imm7 $end
    $var wire 32 B io_I_Imm [31:0] $end
    $var wire 32 @ io_S_Imm [31:0] $end
    $var wire 32 A io_U_Imm [31:0] $end
    $var wire 32 ? io_ins [31:0] $end
   $upscope $end
   $scope module insMem $end
    $var wire  1 "' clock $end
    $var wire 32 . io_rData [31:0] $end
    $var wire 10 J io_wrAdder [9:0] $end
    $var wire 10 J mem__T_11_addr [9:0] $end
    $var wire 32 . mem__T_11_data [31:0] $end
    $scope module BindsTo_0_InsMem_Inst $end
     $var wire  1 "' clock $end
     $var wire 32 . io_rData [31:0] $end
     $var wire 10 J io_wrAdder [9:0] $end
    $upscope $end
   $upscope $end
   $scope module memWr $end
    $var wire  1 "' clock $end
    $var wire 32 W io_aluOutput_in [31:0] $end
    $var wire 32 Z io_aluOutput_out [31:0] $end
    $var wire 32 / io_dataOut_in [31:0] $end
    $var wire 32 Y io_dataOut_out [31:0] $end
    $var wire  1 N io_memToReg_in $end
    $var wire  1 X io_memToReg_out $end
    $var wire  5 V io_rd_in [4:0] $end
    $var wire  5 = io_rd_out [4:0] $end
    $var wire 32 Z reg_aluOutput [31:0] $end
    $var wire 32 Y reg_dataOut [31:0] $end
    $var wire  1 X reg_memToReg $end
    $var wire  5 = reg_rd [4:0] $end
    $var wire  1 "( reset $end
   $upscope $end
   $scope module regFile $end
    $var wire  1 "' clock $end
    $var wire  1 % io_RegWrite $end
    $var wire 32 * io_WriteData [31:0] $end
    $var wire  5 = io_rd [4:0] $end
    $var wire 32 > io_rd1 [31:0] $end
    $var wire 32 + io_rd2 [31:0] $end
    $var wire  5 ; io_rs1 [4:0] $end
    $var wire  5 < io_rs2 [4:0] $end
    $var wire 32 \ registers_0 [31:0] $end
    $var wire 32 ] registers_1 [31:0] $end
    $var wire 32 f registers_10 [31:0] $end
    $var wire 32 g registers_11 [31:0] $end
    $var wire 32 h registers_12 [31:0] $end
    $var wire 32 i registers_13 [31:0] $end
    $var wire 32 j registers_14 [31:0] $end
    $var wire 32 k registers_15 [31:0] $end
    $var wire 32 l registers_16 [31:0] $end
    $var wire 32 m registers_17 [31:0] $end
    $var wire 32 n registers_18 [31:0] $end
    $var wire 32 o registers_19 [31:0] $end
    $var wire 32 ^ registers_2 [31:0] $end
    $var wire 32 p registers_20 [31:0] $end
    $var wire 32 q registers_21 [31:0] $end
    $var wire 32 r registers_22 [31:0] $end
    $var wire 32 s registers_23 [31:0] $end
    $var wire 32 t registers_24 [31:0] $end
    $var wire 32 u registers_25 [31:0] $end
    $var wire 32 v registers_26 [31:0] $end
    $var wire 32 w registers_27 [31:0] $end
    $var wire 32 x registers_28 [31:0] $end
    $var wire 32 y registers_29 [31:0] $end
    $var wire 32 _ registers_3 [31:0] $end
    $var wire 32 z registers_30 [31:0] $end
    $var wire 32 { registers_31 [31:0] $end
    $var wire 32 ` registers_4 [31:0] $end
    $var wire 32 a registers_5 [31:0] $end
    $var wire 32 b registers_6 [31:0] $end
    $var wire 32 c registers_7 [31:0] $end
    $var wire 32 d registers_8 [31:0] $end
    $var wire 32 e registers_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b000 &
b00 '
0(
b00 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000100000000000000110010011 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
02
03
04
05
06
07
08
b00000000000000000000000000000000 9
b0000000 :
b00000 ;
b00000 <
b00000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b000 C
0D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000 G
b00000000000000000000000000000100 H
b00000000000000000000000000000000 I
b0000000000 J
b0000000000 K
b00000000000000000000000000000000 L
0M
0N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000 Q
0R
0S
b00000 T
b00000000000000000000000000000000 U
b00000 V
b00000000000000000000000000000000 W
0X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
0[
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
0|
b0000 }
b00000000 ~
0"!
b0000 ""
b000000 "#
0"$
b0000000000 "%
0"&
0"'
1"(
b00000000000000000000000000000000 ")
1"*
#1
b00000000010100000000001010010011 .
b00000000000000000000000000001000 H
b00000000000000000000000000000100 I
b0000000001 J
1"'
#2
0"'
#3
b00000000010100000000001000010011 .
b00000000000000000000000000001100 H
b00000000000000000000000000001000 I
b0000000010 J
1"'
#4
0"'
#5
b00000000010100100000010000110011 .
b00000000000000000000000000010000 H
b00000000000000000000000000001100 I
b0000000011 J
1"'
#6
0"'
#7
b00000000000000000000000000000000 .
b00000000000000000000000000010100 H
b00000000000000000000000000010000 I
b0000000100 J
1"'
#8
0"'
#9
b00000000000000000000000000011000 H
b00000000000000000000000000010100 I
b0000000101 J
1"'
#10
0"'
0"(
#11
b00000000000000000000000000011100 H
b00000000000000000000000000011000 I
b0000000110 J
b00000000000000000000000000010100 O
b00000000000000000000000000011000 P
1"'
#12
0"'
#13
b00000000000000000000000000100000 H
b00000000000000000000000000011100 I
b0000000111 J
b00000000000000000000000000011000 O
b00000000000000000000000000011100 P
1"'
#14
0"'
#15
b00000000000000000000000000100100 H
b00000000000000000000000000100000 I
b0000001000 J
b00000000000000000000000000011100 O
b00000000000000000000000000100000 P
1"'
#16
0"'
#17
b00000000000000000000000000101000 H
b00000000000000000000000000100100 I
b0000001001 J
b00000000000000000000000000100000 O
b00000000000000000000000000100100 P
1"'
#18
0"'
#19
b00000000000000000000000000101100 H
b00000000000000000000000000101000 I
b0000001010 J
b00000000000000000000000000100100 O
b00000000000000000000000000101000 P
1"'
