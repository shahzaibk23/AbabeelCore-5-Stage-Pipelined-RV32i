;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Top : 
  module ITD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opCode : UInt<7>, RType : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, IType : UInt<1>, Jalr : UInt<1>, Jal : UInt<1>, Lui : UInt<1>}
    
    io.RType <= UInt<1>("h00") @[ITD.scala 18:18]
    io.Load <= UInt<1>("h00") @[ITD.scala 19:17]
    io.Store <= UInt<1>("h00") @[ITD.scala 20:18]
    io.Branch <= UInt<1>("h00") @[ITD.scala 21:19]
    io.IType <= UInt<1>("h00") @[ITD.scala 22:18]
    io.Jalr <= UInt<1>("h00") @[ITD.scala 23:17]
    io.Jal <= UInt<1>("h00") @[ITD.scala 24:16]
    io.Lui <= UInt<1>("h00") @[ITD.scala 25:16]
    node _T_32 = eq(io.opCode, UInt<6>("h033")) @[ITD.scala 27:24]
    when _T_32 : @[ITD.scala 27:41]
      io.RType <= UInt<1>("h01") @[ITD.scala 28:26]
      skip @[ITD.scala 27:41]
    else : @[ITD.scala 29:47]
      node _T_35 = eq(io.opCode, UInt<2>("h03")) @[ITD.scala 29:30]
      when _T_35 : @[ITD.scala 29:47]
        io.Load <= UInt<1>("h01") @[ITD.scala 30:25]
        skip @[ITD.scala 29:47]
      else : @[ITD.scala 31:47]
        node _T_38 = eq(io.opCode, UInt<6>("h023")) @[ITD.scala 31:30]
        when _T_38 : @[ITD.scala 31:47]
          io.Store <= UInt<1>("h01") @[ITD.scala 32:26]
          skip @[ITD.scala 31:47]
        else : @[ITD.scala 33:47]
          node _T_41 = eq(io.opCode, UInt<7>("h063")) @[ITD.scala 33:30]
          when _T_41 : @[ITD.scala 33:47]
            io.Branch <= UInt<1>("h01") @[ITD.scala 34:27]
            skip @[ITD.scala 33:47]
          else : @[ITD.scala 35:47]
            node _T_44 = eq(io.opCode, UInt<5>("h013")) @[ITD.scala 35:30]
            when _T_44 : @[ITD.scala 35:47]
              io.IType <= UInt<1>("h01") @[ITD.scala 36:26]
              skip @[ITD.scala 35:47]
            else : @[ITD.scala 37:47]
              node _T_47 = eq(io.opCode, UInt<7>("h067")) @[ITD.scala 37:30]
              when _T_47 : @[ITD.scala 37:47]
                io.Jalr <= UInt<1>("h01") @[ITD.scala 38:25]
                skip @[ITD.scala 37:47]
              else : @[ITD.scala 39:47]
                node _T_50 = eq(io.opCode, UInt<7>("h06f")) @[ITD.scala 39:30]
                when _T_50 : @[ITD.scala 39:47]
                  io.Jal <= UInt<1>("h01") @[ITD.scala 40:24]
                  skip @[ITD.scala 39:47]
                else : @[ITD.scala 41:47]
                  node _T_53 = eq(io.opCode, UInt<6>("h037")) @[ITD.scala 41:30]
                  when _T_53 : @[ITD.scala 41:47]
                    io.Lui <= UInt<1>("h01") @[ITD.scala 42:24]
                    skip @[ITD.scala 41:47]
    
  module CD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RType : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip SBType : UInt<1>, flip IType : UInt<1>, flip Jalr : UInt<1>, flip Jal : UInt<1>, flip Lui : UInt<1>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, AluOp : UInt<3>, Operand_aSel : UInt<2>, Operand_bSel : UInt<1>, ExtendSel : UInt<2>, NextPcSel : UInt<2>}
    
    io.MemWrite <= UInt<1>("h00") @[CD.scala 29:29]
    io.Branch <= UInt<1>("h00") @[CD.scala 30:27]
    io.MemRead <= UInt<1>("h00") @[CD.scala 31:28]
    io.RegWrite <= UInt<1>("h00") @[CD.scala 32:29]
    io.MemToReg <= UInt<1>("h00") @[CD.scala 33:29]
    io.AluOp <= UInt<1>("h00") @[CD.scala 34:26]
    io.Operand_aSel <= UInt<1>("h00") @[CD.scala 35:33]
    io.Operand_bSel <= UInt<1>("h00") @[CD.scala 36:33]
    io.ExtendSel <= UInt<1>("h00") @[CD.scala 37:30]
    io.NextPcSel <= UInt<1>("h00") @[CD.scala 38:30]
    node _T_52 = eq(io.RType, UInt<1>("h01")) @[CD.scala 41:31]
    when _T_52 : @[CD.scala 41:39]
      io.RegWrite <= UInt<1>("h01") @[CD.scala 42:37]
      skip @[CD.scala 41:39]
    else : @[CD.scala 43:44]
      node _T_55 = eq(io.Load, UInt<1>("h01")) @[CD.scala 43:36]
      when _T_55 : @[CD.scala 43:44]
        io.MemRead <= UInt<1>("h01") @[CD.scala 44:36]
        io.RegWrite <= UInt<1>("h01") @[CD.scala 45:37]
        io.MemToReg <= UInt<1>("h01") @[CD.scala 46:37]
        io.AluOp <= UInt<3>("h04") @[CD.scala 47:34]
        io.Operand_bSel <= UInt<1>("h01") @[CD.scala 48:41]
        skip @[CD.scala 43:44]
      else : @[CD.scala 49:45]
        node _T_62 = eq(io.Store, UInt<1>("h01")) @[CD.scala 49:37]
        when _T_62 : @[CD.scala 49:45]
          io.MemWrite <= UInt<1>("h01") @[CD.scala 50:37]
          io.AluOp <= UInt<3>("h05") @[CD.scala 51:34]
          io.Operand_bSel <= UInt<1>("h01") @[CD.scala 52:41]
          io.ExtendSel <= UInt<2>("h02") @[CD.scala 53:38]
          skip @[CD.scala 49:45]
        else : @[CD.scala 54:46]
          node _T_68 = eq(io.SBType, UInt<1>("h01")) @[CD.scala 54:38]
          when _T_68 : @[CD.scala 54:46]
            io.Branch <= UInt<1>("h01") @[CD.scala 55:35]
            io.AluOp <= UInt<2>("h02") @[CD.scala 56:34]
            io.NextPcSel <= UInt<1>("h01") @[CD.scala 57:38]
            skip @[CD.scala 54:46]
          else : @[CD.scala 58:45]
            node _T_73 = eq(io.IType, UInt<1>("h01")) @[CD.scala 58:37]
            when _T_73 : @[CD.scala 58:45]
              io.RegWrite <= UInt<1>("h01") @[CD.scala 59:37]
              io.AluOp <= UInt<1>("h01") @[CD.scala 60:34]
              io.Operand_bSel <= UInt<1>("h01") @[CD.scala 61:41]
              skip @[CD.scala 58:45]
            else : @[CD.scala 62:44]
              node _T_78 = eq(io.Jalr, UInt<1>("h01")) @[CD.scala 62:36]
              when _T_78 : @[CD.scala 62:44]
                io.RegWrite <= UInt<1>("h01") @[CD.scala 63:37]
                io.AluOp <= UInt<2>("h03") @[CD.scala 64:34]
                io.Operand_aSel <= UInt<2>("h02") @[CD.scala 65:41]
                io.NextPcSel <= UInt<2>("h03") @[CD.scala 66:38]
                skip @[CD.scala 62:44]
              else : @[CD.scala 67:43]
                node _T_84 = eq(io.Jal, UInt<1>("h01")) @[CD.scala 67:35]
                when _T_84 : @[CD.scala 67:43]
                  io.RegWrite <= UInt<1>("h01") @[CD.scala 68:37]
                  io.AluOp <= UInt<2>("h03") @[CD.scala 69:34]
                  io.Operand_aSel <= UInt<2>("h02") @[CD.scala 70:41]
                  io.NextPcSel <= UInt<2>("h02") @[CD.scala 71:38]
                  skip @[CD.scala 67:43]
                else : @[CD.scala 73:43]
                  node _T_90 = eq(io.Lui, UInt<1>("h01")) @[CD.scala 73:35]
                  when _T_90 : @[CD.scala 73:43]
                    io.RegWrite <= UInt<1>("h01") @[CD.scala 74:37]
                    io.AluOp <= UInt<3>("h06") @[CD.scala 75:34]
                    io.Operand_aSel <= UInt<2>("h03") @[CD.scala 76:41]
                    io.Operand_bSel <= UInt<1>("h01") @[CD.scala 77:41]
                    io.ExtendSel <= UInt<1>("h01") @[CD.scala 78:38]
                    skip @[CD.scala 73:43]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip OpCode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, AluOp : UInt<3>, Operand_aSel : UInt<2>, Operand_bSel : UInt<1>, ExtendSel : UInt<2>, NextPcSel : UInt<2>}
    
    inst ID of ITD @[Control.scala 21:32]
    ID.clock <= clock
    ID.reset <= reset
    inst CD of CD @[Control.scala 22:32]
    CD.clock <= clock
    CD.reset <= reset
    ID.io.opCode <= io.OpCode @[Control.scala 24:30]
    CD.io.RType <= ID.io.RType @[Control.scala 27:29]
    CD.io.Load <= ID.io.Load @[Control.scala 28:28]
    CD.io.Store <= ID.io.Store @[Control.scala 29:29]
    CD.io.SBType <= ID.io.Branch @[Control.scala 30:30]
    CD.io.IType <= ID.io.IType @[Control.scala 31:29]
    CD.io.Jalr <= ID.io.Jalr @[Control.scala 32:28]
    CD.io.Jal <= ID.io.Jal @[Control.scala 33:27]
    CD.io.Lui <= ID.io.Lui @[Control.scala 34:27]
    io.MemWrite <= CD.io.MemWrite @[Control.scala 36:29]
    io.Branch <= CD.io.Branch @[Control.scala 37:27]
    io.MemRead <= CD.io.MemRead @[Control.scala 38:28]
    io.RegWrite <= CD.io.RegWrite @[Control.scala 39:29]
    io.MemToReg <= CD.io.MemToReg @[Control.scala 40:29]
    io.AluOp <= CD.io.AluOp @[Control.scala 41:26]
    io.Operand_aSel <= CD.io.Operand_aSel @[Control.scala 42:33]
    io.Operand_bSel <= CD.io.Operand_bSel @[Control.scala 43:33]
    io.ExtendSel <= CD.io.ExtendSel @[Control.scala 44:30]
    io.NextPcSel <= CD.io.NextPcSel @[Control.scala 45:30]
    
  module RegFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RegWrite : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rd1 : SInt<32>, rd2 : SInt<32>}
    
    reg registers : SInt<32>[32], clock @[RegFile.scala 17:28]
    registers[0] <= asSInt(UInt<1>("h00")) @[RegFile.scala 18:22]
    registers[2] <= asSInt(UInt<11>("h0200")) @[RegFile.scala 19:22]
    io.rd1 <= registers[io.rs1] @[RegFile.scala 24:16]
    io.rd2 <= registers[io.rs2] @[RegFile.scala 25:16]
    node _T_61 = eq(io.RegWrite, UInt<1>("h01")) @[RegFile.scala 26:26]
    when _T_61 : @[RegFile.scala 26:34]
      node _T_63 = eq(io.rd, UInt<1>("h00")) @[RegFile.scala 27:28]
      when _T_63 : @[RegFile.scala 27:43]
        registers[io.rd] <= asSInt(UInt<1>("h00")) @[RegFile.scala 28:42]
        skip @[RegFile.scala 27:43]
      else : @[RegFile.scala 29:28]
        registers[io.rd] <= io.WriteData @[RegFile.scala 30:42]
        skip @[RegFile.scala 29:28]
      skip @[RegFile.scala 26:34]
    
  module ImmGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ins : UInt<32>, flip PC : UInt<32>, S_Imm : SInt<32>, SB_Imm : SInt<32>, U_Imm : SInt<32>, UJ_Imm : SInt<32>, I_Imm : SInt<32>}
    
    node imm7 = bits(io.ins, 7, 7) @[ImmGen.scala 18:34]
    node imm11 = bits(io.ins, 11, 8) @[ImmGen.scala 19:35]
    node imm19 = bits(io.ins, 19, 12) @[ImmGen.scala 20:35]
    node imm20 = bits(io.ins, 20, 20) @[ImmGen.scala 21:35]
    node imm24 = bits(io.ins, 24, 21) @[ImmGen.scala 22:35]
    node imm30 = bits(io.ins, 30, 25) @[ImmGen.scala 23:35]
    node imm31 = bits(io.ins, 31, 31) @[ImmGen.scala 24:35]
    node _T_19 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_22 = mux(_T_19, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_23 = cat(imm24, imm20) @[Cat.scala 30:58]
    node _T_24 = cat(_T_22, imm31) @[Cat.scala 30:58]
    node _T_25 = cat(_T_24, imm30) @[Cat.scala 30:58]
    node _T_26 = cat(_T_25, _T_23) @[Cat.scala 30:58]
    node _T_27 = asSInt(_T_26) @[ImmGen.scala 26:73]
    io.I_Imm <= _T_27 @[ImmGen.scala 26:26]
    node _T_28 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_31 = mux(_T_28, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_32 = cat(imm11, imm7) @[Cat.scala 30:58]
    node _T_33 = cat(_T_31, imm31) @[Cat.scala 30:58]
    node _T_34 = cat(_T_33, imm30) @[Cat.scala 30:58]
    node _T_35 = cat(_T_34, _T_32) @[Cat.scala 30:58]
    node _T_36 = asSInt(_T_35) @[ImmGen.scala 27:72]
    io.S_Imm <= _T_36 @[ImmGen.scala 27:26]
    node _T_37 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_40 = mux(_T_37, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_42 = cat(imm30, imm11) @[Cat.scala 30:58]
    node _T_43 = cat(_T_42, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_44 = cat(_T_40, imm31) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, imm7) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_43) @[Cat.scala 30:58]
    node _T_47 = asSInt(_T_46) @[ImmGen.scala 28:77]
    node _T_48 = asSInt(io.PC) @[ImmGen.scala 28:92]
    node _T_49 = add(_T_47, _T_48) @[ImmGen.scala 28:84]
    node _T_50 = tail(_T_49, 1) @[ImmGen.scala 28:84]
    node _T_51 = asSInt(_T_50) @[ImmGen.scala 28:84]
    io.SB_Imm <= _T_51 @[ImmGen.scala 28:27]
    node _T_52 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_55 = mux(_T_52, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_56 = cat(imm24, imm20) @[Cat.scala 30:58]
    node _T_57 = cat(_T_56, imm19) @[Cat.scala 30:58]
    node _T_58 = cat(_T_55, imm31) @[Cat.scala 30:58]
    node _T_59 = cat(_T_58, imm30) @[Cat.scala 30:58]
    node _T_60 = cat(_T_59, _T_57) @[Cat.scala 30:58]
    node _T_62 = dshl(_T_60, UInt<4>("h0c")) @[ImmGen.scala 29:80]
    node _T_63 = asSInt(_T_62) @[ImmGen.scala 29:91]
    io.U_Imm <= _T_63 @[ImmGen.scala 29:26]
    node _T_64 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_67 = mux(_T_64, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_69 = cat(imm30, imm24) @[Cat.scala 30:58]
    node _T_70 = cat(_T_69, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_71 = cat(imm19, imm20) @[Cat.scala 30:58]
    node _T_72 = cat(_T_67, imm31) @[Cat.scala 30:58]
    node _T_73 = cat(_T_72, _T_71) @[Cat.scala 30:58]
    node _T_74 = cat(_T_73, _T_70) @[Cat.scala 30:58]
    node _T_75 = asSInt(_T_74) @[ImmGen.scala 30:84]
    node _T_76 = asSInt(io.PC) @[ImmGen.scala 30:99]
    node _T_77 = add(_T_75, _T_76) @[ImmGen.scala 30:91]
    node _T_78 = tail(_T_77, 1) @[ImmGen.scala 30:91]
    node _T_79 = asSInt(_T_78) @[ImmGen.scala 30:91]
    io.UJ_Imm <= _T_79 @[ImmGen.scala 30:27]
    
  module AluControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip AluOp : UInt<3>, flip Func3 : UInt<3>, flip Func7 : UInt<1>, AluC : UInt<5>}
    
    io.AluC <= UInt<1>("h00") @[AluControl.scala 16:17]
    node _T_15 = eq(io.AluOp, UInt<1>("h00")) @[AluControl.scala 18:23]
    when _T_15 : @[AluControl.scala 18:36]
      node _T_17 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
      node _T_18 = cat(_T_17, io.Func3) @[Cat.scala 30:58]
      io.AluC <= _T_18 @[AluControl.scala 19:25]
      skip @[AluControl.scala 18:36]
    else : @[AluControl.scala 20:42]
      node _T_20 = eq(io.AluOp, UInt<3>("h04")) @[AluControl.scala 20:29]
      when _T_20 : @[AluControl.scala 20:42]
        io.AluC <= UInt<1>("h00") @[AluControl.scala 21:25]
        skip @[AluControl.scala 20:42]
      else : @[AluControl.scala 22:42]
        node _T_23 = eq(io.AluOp, UInt<3>("h05")) @[AluControl.scala 22:29]
        when _T_23 : @[AluControl.scala 22:42]
          io.AluC <= UInt<1>("h00") @[AluControl.scala 23:25]
          skip @[AluControl.scala 22:42]
        else : @[AluControl.scala 24:42]
          node _T_26 = eq(io.AluOp, UInt<2>("h02")) @[AluControl.scala 24:29]
          when _T_26 : @[AluControl.scala 24:42]
            node _T_28 = cat(UInt<2>("h02"), io.Func3) @[Cat.scala 30:58]
            io.AluC <= _T_28 @[AluControl.scala 25:25]
            skip @[AluControl.scala 24:42]
          else : @[AluControl.scala 26:42]
            node _T_30 = eq(io.AluOp, UInt<1>("h01")) @[AluControl.scala 26:29]
            when _T_30 : @[AluControl.scala 26:42]
              node _T_32 = eq(io.Func3, UInt<1>("h01")) @[AluControl.scala 27:31]
              when _T_32 : @[AluControl.scala 27:44]
                node _T_34 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
                node _T_35 = cat(_T_34, io.Func3) @[Cat.scala 30:58]
                io.AluC <= _T_35 @[AluControl.scala 28:33]
                skip @[AluControl.scala 27:44]
              else : @[AluControl.scala 29:28]
                node _T_37 = cat(UInt<1>("h00"), io.Func3) @[Cat.scala 30:58]
                io.AluC <= _T_37 @[AluControl.scala 30:33]
                skip @[AluControl.scala 29:28]
              skip @[AluControl.scala 26:42]
            else : @[AluControl.scala 32:42]
              node _T_39 = eq(io.AluOp, UInt<2>("h03")) @[AluControl.scala 32:29]
              when _T_39 : @[AluControl.scala 32:42]
                io.AluC <= UInt<5>("h01f") @[AluControl.scala 33:25]
                skip @[AluControl.scala 32:42]
              else : @[AluControl.scala 34:42]
                node _T_42 = eq(io.AluOp, UInt<3>("h06")) @[AluControl.scala 34:29]
                when _T_42 : @[AluControl.scala 34:42]
                  io.AluC <= UInt<1>("h00") @[AluControl.scala 35:25]
                  skip @[AluControl.scala 34:42]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<32>, flip b : SInt<32>, flip AluControl : UInt<5>, AluBranch : UInt<1>, output : SInt<32>}
    
    io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 14:19]
    node _T_17 = eq(io.AluControl, UInt<1>("h00")) @[ALU.scala 16:28]
    when _T_17 : @[ALU.scala 16:43]
      node _T_18 = add(io.a, io.b) @[ALU.scala 17:35]
      node _T_19 = tail(_T_18, 1) @[ALU.scala 17:35]
      node _T_20 = asSInt(_T_19) @[ALU.scala 17:35]
      io.output <= _T_20 @[ALU.scala 17:27]
      skip @[ALU.scala 16:43]
    else : @[ALU.scala 18:49]
      node _T_22 = eq(io.AluControl, UInt<1>("h01")) @[ALU.scala 18:34]
      when _T_22 : @[ALU.scala 18:49]
        node _T_23 = bits(io.a, 4, 0) @[ALU.scala 19:34]
        node _T_24 = bits(io.b, 4, 0) @[ALU.scala 19:47]
        node _T_25 = dshl(_T_23, _T_24) @[ALU.scala 19:40]
        node _T_26 = asSInt(_T_25) @[ALU.scala 19:54]
        io.output <= _T_26 @[ALU.scala 19:26]
        skip @[ALU.scala 18:49]
      else : @[ALU.scala 20:49]
        node _T_28 = eq(io.AluControl, UInt<2>("h02")) @[ALU.scala 20:34]
        when _T_28 : @[ALU.scala 20:49]
          node _T_29 = lt(io.a, io.b) @[ALU.scala 21:27]
          when _T_29 : @[ALU.scala 21:34]
            io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 22:35]
            skip @[ALU.scala 21:34]
          else : @[ALU.scala 23:28]
            io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 24:35]
            skip @[ALU.scala 23:28]
          skip @[ALU.scala 20:49]
        else : @[ALU.scala 26:84]
          node _T_33 = eq(io.AluControl, UInt<2>("h03")) @[ALU.scala 26:35]
          node _T_35 = eq(io.AluControl, UInt<5>("h016")) @[ALU.scala 26:68]
          node _T_36 = or(_T_33, _T_35) @[ALU.scala 26:51]
          when _T_36 : @[ALU.scala 26:84]
            node _T_37 = asUInt(io.a) @[ALU.scala 27:31]
            node _T_38 = asUInt(io.b) @[ALU.scala 28:31]
            node _T_39 = lt(_T_37, _T_38) @[ALU.scala 29:25]
            when _T_39 : @[ALU.scala 29:30]
              io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 30:35]
              skip @[ALU.scala 29:30]
            else : @[ALU.scala 31:28]
              io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 32:35]
              skip @[ALU.scala 31:28]
            skip @[ALU.scala 26:84]
          else : @[ALU.scala 34:49]
            node _T_43 = eq(io.AluControl, UInt<3>("h04")) @[ALU.scala 34:34]
            when _T_43 : @[ALU.scala 34:49]
              node _T_44 = xor(io.a, io.b) @[ALU.scala 35:35]
              node _T_45 = asSInt(_T_44) @[ALU.scala 35:35]
              io.output <= _T_45 @[ALU.scala 35:27]
              skip @[ALU.scala 34:49]
            else : @[ALU.scala 36:49]
              node _T_47 = eq(io.AluControl, UInt<3>("h05")) @[ALU.scala 36:34]
              when _T_47 : @[ALU.scala 36:49]
                node _T_48 = bits(io.a, 4, 0) @[ALU.scala 37:32]
                node _T_49 = bits(io.b, 4, 0) @[ALU.scala 38:32]
                node _T_50 = asUInt(io.a) @[ALU.scala 39:34]
                node _T_51 = asUInt(io.b) @[ALU.scala 39:49]
                node _T_52 = dshr(_T_50, _T_51) @[ALU.scala 39:41]
                node _T_53 = asSInt(_T_52) @[ALU.scala 40:36]
                io.output <= _T_53 @[ALU.scala 40:27]
                skip @[ALU.scala 36:49]
              else : @[ALU.scala 41:49]
                node _T_55 = eq(io.AluControl, UInt<3>("h06")) @[ALU.scala 41:34]
                when _T_55 : @[ALU.scala 41:49]
                  node _T_56 = or(io.a, io.b) @[ALU.scala 42:35]
                  node _T_57 = asSInt(_T_56) @[ALU.scala 42:35]
                  io.output <= _T_57 @[ALU.scala 42:27]
                  skip @[ALU.scala 41:49]
                else : @[ALU.scala 43:49]
                  node _T_59 = eq(io.AluControl, UInt<3>("h07")) @[ALU.scala 43:34]
                  when _T_59 : @[ALU.scala 43:49]
                    node _T_60 = and(io.a, io.b) @[ALU.scala 44:35]
                    node _T_61 = asSInt(_T_60) @[ALU.scala 44:35]
                    io.output <= _T_61 @[ALU.scala 44:27]
                    skip @[ALU.scala 43:49]
                  else : @[ALU.scala 45:49]
                    node _T_63 = eq(io.AluControl, UInt<4>("h08")) @[ALU.scala 45:34]
                    when _T_63 : @[ALU.scala 45:49]
                      node _T_64 = sub(io.a, io.b) @[ALU.scala 46:35]
                      node _T_65 = tail(_T_64, 1) @[ALU.scala 46:35]
                      node _T_66 = asSInt(_T_65) @[ALU.scala 46:35]
                      io.output <= _T_66 @[ALU.scala 46:27]
                      skip @[ALU.scala 45:49]
                    else : @[ALU.scala 47:49]
                      node _T_68 = eq(io.AluControl, UInt<4>("h0d")) @[ALU.scala 47:34]
                      when _T_68 : @[ALU.scala 47:49]
                        node _T_69 = bits(io.a, 4, 0) @[ALU.scala 48:35]
                        node _T_70 = bits(io.b, 4, 0) @[ALU.scala 48:48]
                        node _T_71 = dshr(_T_69, _T_70) @[ALU.scala 48:41]
                        node _T_72 = asSInt(_T_71) @[ALU.scala 48:55]
                        io.output <= _T_72 @[ALU.scala 48:27]
                        skip @[ALU.scala 47:49]
                      else : @[ALU.scala 49:49]
                        node _T_74 = eq(io.AluControl, UInt<5>("h010")) @[ALU.scala 49:34]
                        when _T_74 : @[ALU.scala 49:49]
                          node _T_75 = eq(io.a, io.b) @[ALU.scala 50:27]
                          when _T_75 : @[ALU.scala 50:36]
                            io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 51:35]
                            skip @[ALU.scala 50:36]
                          else : @[ALU.scala 52:28]
                            io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 53:35]
                            skip @[ALU.scala 52:28]
                          skip @[ALU.scala 49:49]
                        else : @[ALU.scala 55:49]
                          node _T_79 = eq(io.AluControl, UInt<5>("h011")) @[ALU.scala 55:34]
                          when _T_79 : @[ALU.scala 55:49]
                            node _T_80 = eq(io.a, io.b) @[ALU.scala 56:27]
                            when _T_80 : @[ALU.scala 56:36]
                              io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 57:35]
                              skip @[ALU.scala 56:36]
                            else : @[ALU.scala 58:28]
                              io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 59:35]
                              skip @[ALU.scala 58:28]
                            skip @[ALU.scala 55:49]
                          else : @[ALU.scala 61:49]
                            node _T_84 = eq(io.AluControl, UInt<5>("h014")) @[ALU.scala 61:34]
                            when _T_84 : @[ALU.scala 61:49]
                              node _T_85 = lt(io.a, io.b) @[ALU.scala 62:27]
                              when _T_85 : @[ALU.scala 62:34]
                                io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 63:35]
                                skip @[ALU.scala 62:34]
                              else : @[ALU.scala 64:28]
                                io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 65:35]
                                skip @[ALU.scala 64:28]
                              skip @[ALU.scala 61:49]
                            else : @[ALU.scala 67:49]
                              node _T_89 = eq(io.AluControl, UInt<5>("h015")) @[ALU.scala 67:34]
                              when _T_89 : @[ALU.scala 67:49]
                                node _T_90 = eq(io.a, io.b) @[ALU.scala 68:28]
                                node _T_91 = gt(io.a, io.b) @[ALU.scala 68:46]
                                node _T_92 = or(_T_90, _T_91) @[ALU.scala 68:38]
                                when _T_92 : @[ALU.scala 68:54]
                                  io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 69:35]
                                  skip @[ALU.scala 68:54]
                                else : @[ALU.scala 70:28]
                                  io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 71:35]
                                  skip @[ALU.scala 70:28]
                                skip @[ALU.scala 67:49]
                              else : @[ALU.scala 73:49]
                                node _T_96 = eq(io.AluControl, UInt<5>("h017")) @[ALU.scala 73:34]
                                when _T_96 : @[ALU.scala 73:49]
                                  node _T_97 = asUInt(io.a) @[ALU.scala 74:31]
                                  node _T_98 = asUInt(io.b) @[ALU.scala 75:31]
                                  node _T_99 = eq(_T_97, _T_98) @[ALU.scala 76:26]
                                  node _T_100 = gt(_T_97, _T_98) @[ALU.scala 76:40]
                                  node _T_101 = or(_T_99, _T_100) @[ALU.scala 76:34]
                                  when _T_101 : @[ALU.scala 76:46]
                                    io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 77:35]
                                    skip @[ALU.scala 76:46]
                                  else : @[ALU.scala 78:28]
                                    io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 79:35]
                                    skip @[ALU.scala 78:28]
                                  skip @[ALU.scala 73:49]
                                else : @[ALU.scala 81:49]
                                  node _T_105 = eq(io.AluControl, UInt<5>("h01f")) @[ALU.scala 81:34]
                                  when _T_105 : @[ALU.scala 81:49]
                                    io.output <= io.a @[ALU.scala 82:27]
                                    skip @[ALU.scala 81:49]
    node _T_106 = bits(io.AluControl, 4, 3) @[ALU.scala 87:28]
    node _T_108 = eq(_T_106, UInt<2>("h02")) @[ALU.scala 87:34]
    node _T_110 = eq(io.output, asSInt(UInt<2>("h01"))) @[ALU.scala 87:61]
    node _T_111 = and(_T_108, _T_110) @[ALU.scala 87:47]
    when _T_111 : @[ALU.scala 87:70]
      io.AluBranch <= UInt<1>("h01") @[ALU.scala 88:30]
      skip @[ALU.scala 87:70]
    else : @[ALU.scala 89:20]
      io.AluBranch <= UInt<1>("h00") @[ALU.scala 90:30]
      skip @[ALU.scala 89:20]
    
  module PC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PC.scala 12:26]
    reg <= io.input @[PC.scala 13:13]
    node _T_14 = add(reg, UInt<3>("h04")) @[PC.scala 14:23]
    node _T_15 = tail(_T_14, 1) @[PC.scala 14:23]
    io.pc4 <= _T_15 @[PC.scala 14:16]
    io.pc <= reg @[PC.scala 15:15]
    
  module InsMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAdder : UInt<10>, rData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InsMem.scala 12:22]
    infer mport _T_11 = mem[io.wrAdder], clock @[InsMem.scala 13:24]
    io.rData <= _T_11 @[InsMem.scala 13:18]
    
  module JalrTarget : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<32>, flip b : SInt<32>, output : SInt<32>}
    
    node _T_11 = add(io.a, io.b) @[JalrTarget.scala 12:28]
    node _T_12 = tail(_T_11, 1) @[JalrTarget.scala 12:28]
    node _T_13 = asSInt(_T_12) @[JalrTarget.scala 12:28]
    node _T_15 = and(_T_13, asSInt(UInt<37>("h0ffffffffe"))) @[JalrTarget.scala 12:36]
    node _T_16 = asSInt(_T_15) @[JalrTarget.scala 12:36]
    io.output <= _T_16 @[JalrTarget.scala 12:19]
    
  module MainMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Address : UInt<32>, flip DataIn : SInt<32>, DataOut : SInt<32>, flip str : UInt<1>, flip ld : UInt<1>}
    
    cmem dMem : UInt<32>[1024] @[MainMem.scala 15:23]
    io.DataOut <= asSInt(UInt<1>("h00")) @[MainMem.scala 16:20]
    cmem mem : SInt<32>[1024] @[MainMem.scala 26:22]
    node _T_21 = eq(io.ld, UInt<1>("h01")) @[MainMem.scala 27:20]
    when _T_21 : @[MainMem.scala 27:28]
      node _T_22 = bits(io.Address, 9, 0) @[MainMem.scala 28:34]
      infer mport _T_23 = mem[_T_22], clock @[MainMem.scala 28:34]
      io.DataOut <= _T_23 @[MainMem.scala 28:28]
      skip @[MainMem.scala 27:28]
    else : @[MainMem.scala 29:20]
      io.DataOut is invalid @[MainMem.scala 30:28]
      skip @[MainMem.scala 29:20]
    node _T_25 = eq(io.str, UInt<1>("h01")) @[MainMem.scala 34:21]
    when _T_25 : @[MainMem.scala 34:29]
      node _T_26 = bits(io.Address, 9, 0) @[MainMem.scala 35:20]
      infer mport _T_27 = mem[_T_26], clock @[MainMem.scala 35:20]
      _T_27 <= io.DataIn @[MainMem.scala 35:33]
      skip @[MainMem.scala 34:29]
    else : @[MainMem.scala 36:20]
      io.DataOut is invalid @[MainMem.scala 37:28]
      skip @[MainMem.scala 36:20]
    
  module IF_ID : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip ins_in : UInt<32>, pc_out : UInt<32>, ins_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 21:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 22:30]
    reg reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 23:30]
    reg_pc <= io.pc_in @[IF_ID.scala 25:16]
    reg_pc4 <= io.pc4_in @[IF_ID.scala 26:17]
    reg_ins <= io.ins_in @[IF_ID.scala 27:17]
    io.pc_out <= reg_pc @[IF_ID.scala 29:19]
    io.pc4_out <= reg_pc4 @[IF_ID.scala 30:20]
    io.ins_out <= reg_ins @[IF_ID.scala 31:20]
    
  module ID_EXE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip operandA_in : SInt<32>, flip operandB_in : SInt<32>, flip rd_in : UInt<5>, flip strData_in : SInt<32>, flip aluCtrl_in : UInt<5>, flip regWrite_in : UInt<1>, flip rs1Ins_in : UInt<5>, flip rs2Ins_in : UInt<5>, flip operandAsel_in : UInt<2>, flip operandBsel_in : UInt<1>, flip hazard_in : UInt<1>, flip pc_in : UInt<32>, flip pc4_in : UInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, operandA_out : SInt<32>, operandB_out : SInt<32>, rd_out : UInt<5>, strData_out : SInt<32>, aluCtrl_out : UInt<5>, regWrite_out : UInt<1>, rs1Ins_out : UInt<5>, rs2Ins_out : UInt<5>, operandAsel_out : UInt<2>, operandBsel_out : UInt<1>, hazard_out : UInt<1>, pc_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 47:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 48:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 49:35]
    reg reg_operandA : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EXE.scala 50:35]
    reg reg_operandB : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EXE.scala 51:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EXE.scala 52:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EXE.scala 53:34]
    reg reg_aluCtrl : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EXE.scala 54:34]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 55:35]
    reg reg_rs1Ins : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EXE.scala 56:33]
    reg reg_rs2Ins : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EXE.scala 57:33]
    reg reg_operandAsel : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EXE.scala 58:38]
    reg reg_operandBsel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 59:38]
    reg reg_hazard : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 60:33]
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EXE.scala 61:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EXE.scala 62:30]
    reg_memWrite <= io.memWrite_in @[ID_EXE.scala 65:22]
    reg_memRead <= io.memRead_in @[ID_EXE.scala 66:21]
    reg_memToReg <= io.memToReg_in @[ID_EXE.scala 67:22]
    reg_operandA <= io.operandA_in @[ID_EXE.scala 68:22]
    reg_operandB <= io.operandB_in @[ID_EXE.scala 69:22]
    reg_rd <= io.rd_in @[ID_EXE.scala 70:16]
    reg_strData <= io.strData_in @[ID_EXE.scala 71:21]
    reg_aluCtrl <= io.aluCtrl_in @[ID_EXE.scala 72:21]
    reg_regWrite <= io.regWrite_in @[ID_EXE.scala 73:22]
    reg_rs1Ins <= io.rs1Ins_in @[ID_EXE.scala 74:20]
    reg_rs2Ins <= io.rs2Ins_in @[ID_EXE.scala 75:20]
    reg_operandAsel <= io.operandAsel_in @[ID_EXE.scala 76:25]
    reg_operandBsel <= io.operandBsel_in @[ID_EXE.scala 77:25]
    reg_hazard <= io.hazard_in @[ID_EXE.scala 78:20]
    reg_pc <= io.pc_in @[ID_EXE.scala 79:16]
    reg_pc4 <= io.pc4_in @[ID_EXE.scala 80:17]
    io.memWrite_out <= reg_memWrite @[ID_EXE.scala 83:25]
    io.memRead_out <= reg_memRead @[ID_EXE.scala 84:24]
    io.memToReg_out <= reg_memToReg @[ID_EXE.scala 85:25]
    io.operandA_out <= reg_operandA @[ID_EXE.scala 86:25]
    io.operandB_out <= reg_operandB @[ID_EXE.scala 87:25]
    io.rd_out <= reg_rd @[ID_EXE.scala 88:19]
    io.strData_out <= reg_strData @[ID_EXE.scala 89:24]
    io.aluCtrl_out <= reg_aluCtrl @[ID_EXE.scala 90:24]
    io.regWrite_out <= reg_regWrite @[ID_EXE.scala 91:25]
    io.rs1Ins_out <= reg_rs1Ins @[ID_EXE.scala 92:23]
    io.rs2Ins_out <= reg_rs2Ins @[ID_EXE.scala 93:23]
    io.operandAsel_out <= reg_operandAsel @[ID_EXE.scala 94:28]
    io.operandBsel_out <= reg_operandBsel @[ID_EXE.scala 95:28]
    io.hazard_out <= reg_hazard @[ID_EXE.scala 96:23]
    io.pc_out <= reg_pc @[ID_EXE.scala 97:19]
    io.pc4_out <= reg_pc4 @[ID_EXE.scala 98:20]
    
  module EXE_MEM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip aluOutput_in : SInt<32>, flip strData_in : SInt<32>, flip regWrite_in : UInt<1>, flip rs2Sel_in : UInt<5>, flip baseReg_in : SInt<32>, flip offSet_in : SInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, strData_out : SInt<32>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, rs2Sel_out : UInt<5>, baseReg_out : SInt<32>, offSet_out : SInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 35:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 36:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 37:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EXE_Mem.scala 38:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EXE_Mem.scala 39:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EXE_Mem.scala 40:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 41:35]
    reg reg_rs2Sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EXE_Mem.scala 42:33]
    reg reg_baseReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EXE_Mem.scala 43:34]
    reg reg_offSet : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EXE_Mem.scala 44:33]
    reg_memWrite <= io.memWrite_in @[EXE_Mem.scala 46:22]
    reg_memRead <= io.memRead_in @[EXE_Mem.scala 47:21]
    reg_memToReg <= io.memToReg_in @[EXE_Mem.scala 48:22]
    reg_rd <= io.rd_in @[EXE_Mem.scala 49:16]
    reg_strData <= io.strData_in @[EXE_Mem.scala 50:21]
    reg_aluOutput <= io.aluOutput_in @[EXE_Mem.scala 51:23]
    reg_regWrite <= io.regWrite_in @[EXE_Mem.scala 52:22]
    reg_rs2Sel <= io.rs2Sel_in @[EXE_Mem.scala 53:20]
    reg_baseReg <= io.baseReg_in @[EXE_Mem.scala 54:21]
    reg_offSet <= io.offSet_in @[EXE_Mem.scala 55:20]
    io.memWrite_out <= reg_memWrite @[EXE_Mem.scala 58:25]
    io.memRead_out <= reg_memRead @[EXE_Mem.scala 59:24]
    io.memToReg_out <= reg_memToReg @[EXE_Mem.scala 60:25]
    io.rd_out <= reg_rd @[EXE_Mem.scala 61:19]
    io.strData_out <= reg_strData @[EXE_Mem.scala 62:24]
    io.aluOutput_out <= reg_aluOutput @[EXE_Mem.scala 63:26]
    io.regWrite_out <= reg_regWrite @[EXE_Mem.scala 64:25]
    io.rs2Sel_out <= reg_rs2Sel @[EXE_Mem.scala 65:23]
    io.baseReg_out <= reg_baseReg @[EXE_Mem.scala 66:24]
    io.offSet_out <= reg_offSet @[EXE_Mem.scala 67:23]
    
  module MEM_WR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip dataOut_in : SInt<32>, flip aluOutput_in : SInt<32>, flip regWrite_in : UInt<1>, flip rs2Sel_in : UInt<5>, flip baseReg_in : SInt<32>, flip offSet_in : SInt<32>, flip MemRead_in : UInt<1>, flip memWrite_in : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, dataOut_out : SInt<32>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, rs2Sel_out : UInt<5>, baseReg_out : SInt<32>, offSet_out : SInt<32>, MemRead_out : UInt<1>, memWrite_out : UInt<1>}
    
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WR.scala 36:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WR.scala 37:29]
    reg reg_dataOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WR.scala 38:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WR.scala 39:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WR.scala 40:35]
    reg reg_rs2Sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WR.scala 41:33]
    reg reg_baseReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WR.scala 42:34]
    reg reg_offSet : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WR.scala 43:33]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WR.scala 44:34]
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WR.scala 45:35]
    reg_memToReg <= io.memToReg_in @[Mem_WR.scala 48:22]
    reg_rd <= io.rd_in @[Mem_WR.scala 49:16]
    reg_dataOut <= io.dataOut_in @[Mem_WR.scala 50:21]
    reg_aluOutput <= io.aluOutput_in @[Mem_WR.scala 51:23]
    reg_regWrite <= io.regWrite_in @[Mem_WR.scala 52:22]
    reg_rs2Sel <= io.rs2Sel_in @[Mem_WR.scala 53:20]
    reg_baseReg <= io.baseReg_in @[Mem_WR.scala 54:21]
    reg_offSet <= io.offSet_in @[Mem_WR.scala 55:20]
    reg_memRead <= io.MemRead_in @[Mem_WR.scala 56:21]
    reg_memWrite <= io.memWrite_in @[Mem_WR.scala 57:22]
    io.memToReg_out <= reg_memToReg @[Mem_WR.scala 60:25]
    io.rd_out <= reg_rd @[Mem_WR.scala 61:19]
    io.dataOut_out <= reg_dataOut @[Mem_WR.scala 62:24]
    io.aluOutput_out <= reg_aluOutput @[Mem_WR.scala 63:26]
    io.regWrite_out <= reg_regWrite @[Mem_WR.scala 64:25]
    io.rs2Sel_out <= reg_rs2Sel @[Mem_WR.scala 65:23]
    io.baseReg_out <= reg_baseReg @[Mem_WR.scala 66:24]
    io.offSet_out <= reg_offSet @[Mem_WR.scala 67:23]
    io.MemRead_out <= reg_memRead @[Mem_WR.scala 68:24]
    io.memWrite_out <= reg_memWrite @[Mem_WR.scala 69:25]
    
  module HDU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip exRegWrite : UInt<1>, flip exRd : UInt<5>, flip idRs1 : UInt<5>, flip idRs2 : UInt<5>, flip operandAsel : UInt<2>, flip operandBsel : UInt<1>, flip hazard : UInt<1>, flip memRegWrite : UInt<1>, flip memRd : UInt<5>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    io.forwardA <= UInt<1>("h00") @[HDU.scala 28:21]
    io.forwardB <= UInt<1>("h00") @[HDU.scala 29:21]
    node _T_30 = eq(io.memRegWrite, UInt<1>("h01")) @[HDU.scala 32:29]
    node _T_32 = neq(io.memRd, UInt<1>("h00")) @[HDU.scala 32:52]
    node _T_33 = and(_T_30, _T_32) @[HDU.scala 32:40]
    node _T_34 = eq(io.memRd, io.idRs1) @[HDU.scala 32:80]
    node _T_35 = eq(io.memRd, io.idRs2) @[HDU.scala 32:105]
    node _T_36 = and(_T_34, _T_35) @[HDU.scala 32:93]
    node _T_37 = and(_T_33, _T_36) @[HDU.scala 32:67]
    when _T_37 : @[HDU.scala 32:119]
      io.forwardA <= UInt<2>("h02") @[HDU.scala 33:29]
      io.forwardB <= UInt<2>("h02") @[HDU.scala 34:29]
      skip @[HDU.scala 32:119]
    else : @[HDU.scala 35:98]
      node _T_41 = eq(io.memRegWrite, UInt<1>("h01")) @[HDU.scala 35:35]
      node _T_43 = neq(io.memRd, UInt<1>("h00")) @[HDU.scala 35:58]
      node _T_44 = and(_T_41, _T_43) @[HDU.scala 35:46]
      node _T_45 = eq(io.memRd, io.idRs1) @[HDU.scala 35:85]
      node _T_46 = and(_T_44, _T_45) @[HDU.scala 35:73]
      when _T_46 : @[HDU.scala 35:98]
        io.forwardA <= UInt<2>("h02") @[HDU.scala 36:29]
        skip @[HDU.scala 35:98]
      else : @[HDU.scala 37:98]
        node _T_49 = eq(io.memRegWrite, UInt<1>("h01")) @[HDU.scala 37:35]
        node _T_51 = neq(io.memRd, UInt<1>("h00")) @[HDU.scala 37:58]
        node _T_52 = and(_T_49, _T_51) @[HDU.scala 37:46]
        node _T_53 = eq(io.memRd, io.idRs2) @[HDU.scala 37:85]
        node _T_54 = and(_T_52, _T_53) @[HDU.scala 37:73]
        when _T_54 : @[HDU.scala 37:98]
          io.forwardB <= UInt<2>("h02") @[HDU.scala 38:29]
          skip @[HDU.scala 37:98]
    node _T_57 = eq(io.exRegWrite, UInt<1>("h01")) @[HDU.scala 44:28]
    node _T_59 = neq(io.exRd, UInt<1>("h00")) @[HDU.scala 44:50]
    node _T_60 = and(_T_57, _T_59) @[HDU.scala 44:39]
    node _T_61 = eq(io.exRd, io.idRs1) @[HDU.scala 44:77]
    node _T_62 = eq(io.exRd, io.idRs2) @[HDU.scala 44:101]
    node _T_63 = and(_T_61, _T_62) @[HDU.scala 44:90]
    node _T_64 = and(_T_60, _T_63) @[HDU.scala 44:65]
    when _T_64 : @[HDU.scala 44:115]
      io.forwardA <= UInt<1>("h01") @[HDU.scala 45:29]
      io.forwardB <= UInt<1>("h01") @[HDU.scala 46:29]
      skip @[HDU.scala 44:115]
    else : @[HDU.scala 47:95]
      node _T_68 = eq(io.exRegWrite, UInt<1>("h01")) @[HDU.scala 47:34]
      node _T_70 = neq(io.exRd, UInt<1>("h00")) @[HDU.scala 47:56]
      node _T_71 = and(_T_68, _T_70) @[HDU.scala 47:45]
      node _T_72 = eq(io.exRd, io.idRs1) @[HDU.scala 47:82]
      node _T_73 = and(_T_71, _T_72) @[HDU.scala 47:71]
      when _T_73 : @[HDU.scala 47:95]
        io.forwardA <= UInt<1>("h01") @[HDU.scala 48:29]
        skip @[HDU.scala 47:95]
      else : @[HDU.scala 49:95]
        node _T_76 = eq(io.exRegWrite, UInt<1>("h01")) @[HDU.scala 49:34]
        node _T_78 = neq(io.exRd, UInt<1>("h00")) @[HDU.scala 49:56]
        node _T_79 = and(_T_76, _T_78) @[HDU.scala 49:45]
        node _T_80 = eq(io.exRd, io.idRs2) @[HDU.scala 49:82]
        node _T_81 = and(_T_79, _T_80) @[HDU.scala 49:71]
        when _T_81 : @[HDU.scala 49:95]
          io.forwardB <= UInt<1>("h01") @[HDU.scala 50:29]
          skip @[HDU.scala 49:95]
    
  module StallUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip idExeMemRead : UInt<1>, flip idExeRd : UInt<5>, flip ifIdRs1 : UInt<5>, flip ifIdRs2 : UInt<5>, flip ifIdRd : UInt<5>, flip inst_in : UInt<32>, flip pc4_in : UInt<32>, inst_out : UInt<32>, pc4_out : UInt<32>, hazard : UInt<1>}
    
    reg reg_inst : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[StallUnit.scala 25:31]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[StallUnit.scala 26:30]
    reg_inst <= io.inst_in @[StallUnit.scala 28:18]
    reg_pc4 <= io.pc4_in @[StallUnit.scala 29:17]
    io.inst_out <= reg_inst @[StallUnit.scala 31:21]
    io.pc4_out <= reg_pc4 @[StallUnit.scala 32:20]
    io.hazard <= UInt<1>("h00") @[StallUnit.scala 34:19]
    node _T_31 = eq(io.idExeMemRead, UInt<1>("h01")) @[StallUnit.scala 35:30]
    node _T_32 = eq(io.idExeRd, io.ifIdRs1) @[StallUnit.scala 35:53]
    node _T_33 = eq(io.idExeRd, io.ifIdRs2) @[StallUnit.scala 35:82]
    node _T_34 = or(_T_32, _T_33) @[StallUnit.scala 35:68]
    node _T_35 = and(_T_31, _T_34) @[StallUnit.scala 35:38]
    node _T_37 = neq(io.idExeRd, UInt<1>("h00")) @[StallUnit.scala 35:112]
    node _T_38 = and(_T_35, _T_37) @[StallUnit.scala 35:98]
    when _T_38 : @[StallUnit.scala 35:120]
      io.hazard <= UInt<1>("h01") @[StallUnit.scala 36:27]
      skip @[StallUnit.scala 35:120]
    else : @[StallUnit.scala 37:20]
      io.hazard <= UInt<1>("h00") @[StallUnit.scala 38:27]
      skip @[StallUnit.scala 37:20]
    
  module StoreFwdUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rd : UInt<5>, flip idExeRd : UInt<5>, flip exeMemRd : UInt<5>, flip memWrRd : UInt<5>, flip idExeMemWrite : UInt<1>, flip exeMemMemWrite : UInt<1>, flip memWrMemWrite : UInt<1>, fwd : UInt<2>}
    
    io.fwd <= UInt<1>("h00") @[SFU.scala 25:16]
    node _T_23 = eq(io.memWrMemWrite, UInt<1>("h01")) @[SFU.scala 28:31]
    node _T_25 = neq(io.memWrRd, UInt<1>("h00")) @[SFU.scala 28:56]
    node _T_26 = and(_T_23, _T_25) @[SFU.scala 28:42]
    node _T_27 = eq(io.memWrRd, io.rd) @[SFU.scala 28:85]
    node _T_28 = and(_T_26, _T_27) @[SFU.scala 28:71]
    when _T_28 : @[SFU.scala 28:95]
      io.fwd <= UInt<2>("h03") @[SFU.scala 29:24]
      skip @[SFU.scala 28:95]
    node _T_31 = eq(io.exeMemMemWrite, UInt<1>("h01")) @[SFU.scala 34:32]
    node _T_33 = neq(io.exeMemRd, UInt<1>("h00")) @[SFU.scala 34:58]
    node _T_34 = and(_T_31, _T_33) @[SFU.scala 34:43]
    node _T_35 = eq(io.exeMemRd, io.rd) @[SFU.scala 34:88]
    node _T_36 = and(_T_34, _T_35) @[SFU.scala 34:73]
    when _T_36 : @[SFU.scala 34:98]
      io.fwd <= UInt<2>("h02") @[SFU.scala 35:24]
      skip @[SFU.scala 34:98]
    node _T_39 = eq(io.idExeMemWrite, UInt<1>("h01")) @[SFU.scala 39:31]
    node _T_41 = neq(io.idExeRd, UInt<1>("h00")) @[SFU.scala 39:56]
    node _T_42 = and(_T_39, _T_41) @[SFU.scala 39:42]
    node _T_43 = eq(io.idExeRd, io.rd) @[SFU.scala 39:85]
    node _T_44 = and(_T_42, _T_43) @[SFU.scala 39:71]
    when _T_44 : @[SFU.scala 39:95]
      io.fwd <= UInt<1>("h01") @[SFU.scala 40:24]
      skip @[SFU.scala 39:95]
    
  module BranchUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : SInt<32>, flip rs2 : SInt<32>, flip func3 : UInt<3>, branch : UInt<1>, flip ctrlBranch : UInt<1>}
    
    io.branch <= UInt<1>("h00") @[BU.scala 16:19]
    node _T_17 = eq(io.func3, UInt<1>("h00")) @[BU.scala 18:23]
    when _T_17 : @[BU.scala 18:36]
      node _T_18 = eq(io.rs1, io.rs2) @[BU.scala 19:29]
      node _T_20 = eq(io.ctrlBranch, UInt<1>("h01")) @[BU.scala 19:57]
      node _T_21 = and(_T_18, _T_20) @[BU.scala 19:40]
      when _T_21 : @[BU.scala 19:65]
        io.branch <= UInt<1>("h01") @[BU.scala 20:35]
        skip @[BU.scala 19:65]
      else : @[BU.scala 21:28]
        io.branch <= UInt<1>("h00") @[BU.scala 22:35]
        skip @[BU.scala 21:28]
      skip @[BU.scala 18:36]
    else : @[BU.scala 24:43]
      node _T_25 = eq(io.func3, UInt<1>("h01")) @[BU.scala 24:29]
      when _T_25 : @[BU.scala 24:43]
        node _T_26 = neq(io.rs1, io.rs2) @[BU.scala 25:29]
        node _T_28 = eq(io.ctrlBranch, UInt<1>("h01")) @[BU.scala 25:57]
        node _T_29 = and(_T_26, _T_28) @[BU.scala 25:40]
        when _T_29 : @[BU.scala 25:65]
          io.branch <= UInt<1>("h01") @[BU.scala 26:35]
          skip @[BU.scala 25:65]
        else : @[BU.scala 27:28]
          io.branch <= UInt<1>("h00") @[BU.scala 28:35]
          skip @[BU.scala 27:28]
        skip @[BU.scala 24:43]
      else : @[BU.scala 30:42]
        node _T_33 = eq(io.func3, UInt<3>("h04")) @[BU.scala 30:29]
        when _T_33 : @[BU.scala 30:42]
          node _T_34 = lt(io.rs1, io.rs2) @[BU.scala 31:29]
          node _T_36 = eq(io.ctrlBranch, UInt<1>("h01")) @[BU.scala 31:55]
          node _T_37 = and(_T_34, _T_36) @[BU.scala 31:38]
          when _T_37 : @[BU.scala 31:63]
            io.branch <= UInt<1>("h01") @[BU.scala 32:35]
            skip @[BU.scala 31:63]
          else : @[BU.scala 33:28]
            io.branch <= UInt<1>("h00") @[BU.scala 34:35]
            skip @[BU.scala 33:28]
          skip @[BU.scala 30:42]
        else : @[BU.scala 36:42]
          node _T_41 = eq(io.func3, UInt<3>("h05")) @[BU.scala 36:29]
          when _T_41 : @[BU.scala 36:42]
            node _T_42 = geq(io.rs1, io.rs2) @[BU.scala 37:30]
            node _T_43 = eq(io.rs1, io.rs2) @[BU.scala 37:50]
            node _T_44 = or(_T_42, _T_43) @[BU.scala 37:40]
            node _T_46 = eq(io.ctrlBranch, UInt<1>("h01")) @[BU.scala 37:79]
            node _T_47 = and(_T_44, _T_46) @[BU.scala 37:62]
            when _T_47 : @[BU.scala 37:87]
              io.branch <= UInt<1>("h01") @[BU.scala 38:35]
              skip @[BU.scala 37:87]
            else : @[BU.scala 39:28]
              io.branch <= UInt<1>("h00") @[BU.scala 40:35]
              skip @[BU.scala 39:28]
            skip @[BU.scala 36:42]
          else : @[BU.scala 42:42]
            node _T_51 = eq(io.func3, UInt<3>("h07")) @[BU.scala 42:29]
            when _T_51 : @[BU.scala 42:42]
              node _T_52 = asUInt(io.rs1) @[BU.scala 43:33]
              node _T_53 = asUInt(io.rs2) @[BU.scala 44:33]
              node _T_54 = gt(_T_52, _T_53) @[BU.scala 45:26]
              node _T_55 = eq(_T_52, _T_53) @[BU.scala 45:37]
              node _T_56 = or(_T_54, _T_55) @[BU.scala 45:31]
              node _T_58 = eq(io.ctrlBranch, UInt<1>("h01")) @[BU.scala 45:62]
              node _T_59 = and(_T_56, _T_58) @[BU.scala 45:45]
              when _T_59 : @[BU.scala 45:70]
                io.branch <= UInt<1>("h01") @[BU.scala 46:35]
                skip @[BU.scala 45:70]
              else : @[BU.scala 47:28]
                io.branch <= UInt<1>("h00") @[BU.scala 48:35]
                skip @[BU.scala 47:28]
              skip @[BU.scala 42:42]
    
  module BranchFwdUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip idExeRd : UInt<5>, flip exeMemRd : UInt<5>, flip memWrRd : UInt<5>, flip memMemRead : UInt<1>, flip idExeRegWrite : UInt<1>, flip exeMemRegWrite : UInt<1>, flip memWrRegWrite : UInt<1>, fwdA : UInt<2>, fwdB : UInt<2>}
    
    io.fwdA <= UInt<1>("h00") @[BFU.scala 25:17]
    io.fwdB <= UInt<1>("h00") @[BFU.scala 26:17]
    node _T_30 = eq(io.memWrRegWrite, UInt<1>("h01")) @[BFU.scala 29:31]
    node _T_32 = neq(io.memWrRd, UInt<1>("h00")) @[BFU.scala 29:56]
    node _T_33 = and(_T_30, _T_32) @[BFU.scala 29:42]
    node _T_34 = eq(io.memWrRd, io.rs1) @[BFU.scala 29:86]
    node _T_35 = eq(io.memWrRd, io.rs2) @[BFU.scala 29:111]
    node _T_36 = and(_T_34, _T_35) @[BFU.scala 29:97]
    node _T_37 = and(_T_33, _T_36) @[BFU.scala 29:71]
    when _T_37 : @[BFU.scala 29:123]
      io.fwdA <= UInt<2>("h03") @[BFU.scala 30:25]
      io.fwdB <= UInt<2>("h03") @[BFU.scala 31:25]
      skip @[BFU.scala 29:123]
    else : @[BFU.scala 32:102]
      node _T_41 = eq(io.memWrRegWrite, UInt<1>("h01")) @[BFU.scala 32:37]
      node _T_43 = neq(io.memWrRd, UInt<1>("h00")) @[BFU.scala 32:62]
      node _T_44 = and(_T_41, _T_43) @[BFU.scala 32:48]
      node _T_45 = eq(io.memWrRd, io.rs1) @[BFU.scala 32:91]
      node _T_46 = and(_T_44, _T_45) @[BFU.scala 32:77]
      when _T_46 : @[BFU.scala 32:102]
        io.fwdA <= UInt<2>("h03") @[BFU.scala 33:25]
        skip @[BFU.scala 32:102]
      else : @[BFU.scala 34:102]
        node _T_49 = eq(io.memWrRegWrite, UInt<1>("h01")) @[BFU.scala 34:37]
        node _T_51 = neq(io.memWrRd, UInt<1>("h00")) @[BFU.scala 34:62]
        node _T_52 = and(_T_49, _T_51) @[BFU.scala 34:48]
        node _T_53 = eq(io.memWrRd, io.rs2) @[BFU.scala 34:91]
        node _T_54 = and(_T_52, _T_53) @[BFU.scala 34:77]
        when _T_54 : @[BFU.scala 34:102]
          io.fwdB <= UInt<2>("h03") @[BFU.scala 35:25]
          skip @[BFU.scala 34:102]
    node _T_57 = eq(io.exeMemRegWrite, UInt<1>("h01")) @[BFU.scala 40:32]
    node _T_59 = neq(io.exeMemRd, UInt<1>("h00")) @[BFU.scala 40:58]
    node _T_60 = and(_T_57, _T_59) @[BFU.scala 40:43]
    node _T_61 = eq(io.exeMemRd, io.rs1) @[BFU.scala 40:89]
    node _T_62 = eq(io.exeMemRd, io.rs2) @[BFU.scala 40:115]
    node _T_63 = and(_T_61, _T_62) @[BFU.scala 40:100]
    node _T_64 = and(_T_60, _T_63) @[BFU.scala 40:73]
    when _T_64 : @[BFU.scala 40:127]
      io.fwdA <= UInt<2>("h02") @[BFU.scala 41:25]
      io.fwdB <= UInt<2>("h02") @[BFU.scala 42:25]
      skip @[BFU.scala 40:127]
    else : @[BFU.scala 43:105]
      node _T_68 = eq(io.exeMemRegWrite, UInt<1>("h01")) @[BFU.scala 43:38]
      node _T_70 = neq(io.exeMemRd, UInt<1>("h00")) @[BFU.scala 43:64]
      node _T_71 = and(_T_68, _T_70) @[BFU.scala 43:49]
      node _T_72 = eq(io.exeMemRd, io.rs1) @[BFU.scala 43:94]
      node _T_73 = and(_T_71, _T_72) @[BFU.scala 43:79]
      when _T_73 : @[BFU.scala 43:105]
        io.fwdA <= UInt<2>("h02") @[BFU.scala 44:25]
        skip @[BFU.scala 43:105]
      else : @[BFU.scala 45:105]
        node _T_76 = eq(io.exeMemRegWrite, UInt<1>("h01")) @[BFU.scala 45:38]
        node _T_78 = neq(io.exeMemRd, UInt<1>("h00")) @[BFU.scala 45:64]
        node _T_79 = and(_T_76, _T_78) @[BFU.scala 45:49]
        node _T_80 = eq(io.exeMemRd, io.rs2) @[BFU.scala 45:94]
        node _T_81 = and(_T_79, _T_80) @[BFU.scala 45:79]
        when _T_81 : @[BFU.scala 45:105]
          io.fwdB <= UInt<2>("h02") @[BFU.scala 46:25]
          skip @[BFU.scala 45:105]
        else : @[BFU.scala 47:101]
          node _T_84 = eq(io.memMemRead, UInt<1>("h01")) @[BFU.scala 47:34]
          node _T_86 = neq(io.exeMemRd, UInt<1>("h00")) @[BFU.scala 47:60]
          node _T_87 = and(_T_84, _T_86) @[BFU.scala 47:45]
          node _T_88 = eq(io.exeMemRd, io.rs2) @[BFU.scala 47:90]
          node _T_89 = and(_T_87, _T_88) @[BFU.scala 47:75]
          when _T_89 : @[BFU.scala 47:101]
            io.fwdB <= UInt<2>("h02") @[BFU.scala 48:25]
            skip @[BFU.scala 47:101]
    node _T_92 = eq(io.idExeRegWrite, UInt<1>("h01")) @[BFU.scala 52:31]
    node _T_94 = neq(io.idExeRd, UInt<1>("h00")) @[BFU.scala 52:56]
    node _T_95 = and(_T_92, _T_94) @[BFU.scala 52:42]
    node _T_96 = eq(io.idExeRd, io.rs1) @[BFU.scala 52:86]
    node _T_97 = eq(io.idExeRd, io.rs2) @[BFU.scala 52:111]
    node _T_98 = and(_T_96, _T_97) @[BFU.scala 52:97]
    node _T_99 = and(_T_95, _T_98) @[BFU.scala 52:71]
    when _T_99 : @[BFU.scala 52:123]
      io.fwdA <= UInt<1>("h01") @[BFU.scala 53:25]
      io.fwdB <= UInt<1>("h01") @[BFU.scala 54:25]
      skip @[BFU.scala 52:123]
    else : @[BFU.scala 55:102]
      node _T_103 = eq(io.idExeRegWrite, UInt<1>("h01")) @[BFU.scala 55:37]
      node _T_105 = neq(io.idExeRd, UInt<1>("h00")) @[BFU.scala 55:62]
      node _T_106 = and(_T_103, _T_105) @[BFU.scala 55:48]
      node _T_107 = eq(io.idExeRd, io.rs1) @[BFU.scala 55:91]
      node _T_108 = and(_T_106, _T_107) @[BFU.scala 55:77]
      when _T_108 : @[BFU.scala 55:102]
        io.fwdA <= UInt<1>("h01") @[BFU.scala 56:25]
        skip @[BFU.scala 55:102]
      else : @[BFU.scala 57:102]
        node _T_111 = eq(io.idExeRegWrite, UInt<1>("h01")) @[BFU.scala 57:37]
        node _T_113 = neq(io.idExeRd, UInt<1>("h00")) @[BFU.scala 57:62]
        node _T_114 = and(_T_111, _T_113) @[BFU.scala 57:48]
        node _T_115 = eq(io.idExeRd, io.rs2) @[BFU.scala 57:91]
        node _T_116 = and(_T_114, _T_115) @[BFU.scala 57:77]
        when _T_116 : @[BFU.scala 57:102]
          io.fwdB <= UInt<1>("h01") @[BFU.scala 58:25]
          skip @[BFU.scala 57:102]
    
  module JalrFwdUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : UInt<5>, flip idExeRd : UInt<5>, flip exeMemRd : UInt<5>, flip memWrRd : UInt<5>, flip idExeRegWrite : UInt<1>, flip exeMemRegWrite : UInt<1>, flip memWrRegWrite : UInt<1>, fwdA : UInt<2>}
    
    io.fwdA <= UInt<1>("h00") @[JFU.scala 23:17]
    node _T_23 = eq(io.memWrRegWrite, UInt<1>("h01")) @[JFU.scala 27:31]
    node _T_25 = neq(io.memWrRd, UInt<1>("h00")) @[JFU.scala 27:56]
    node _T_26 = and(_T_23, _T_25) @[JFU.scala 27:42]
    node _T_27 = eq(io.memWrRd, io.rs1) @[JFU.scala 27:85]
    node _T_28 = and(_T_26, _T_27) @[JFU.scala 27:71]
    when _T_28 : @[JFU.scala 27:96]
      io.fwdA <= UInt<2>("h03") @[JFU.scala 28:25]
      skip @[JFU.scala 27:96]
    node _T_31 = eq(io.exeMemRegWrite, UInt<1>("h01")) @[JFU.scala 32:32]
    node _T_33 = neq(io.exeMemRd, UInt<1>("h00")) @[JFU.scala 32:58]
    node _T_34 = and(_T_31, _T_33) @[JFU.scala 32:43]
    node _T_35 = eq(io.exeMemRd, io.rs1) @[JFU.scala 32:88]
    node _T_36 = and(_T_34, _T_35) @[JFU.scala 32:73]
    when _T_36 : @[JFU.scala 32:99]
      io.fwdA <= UInt<2>("h02") @[JFU.scala 33:25]
      skip @[JFU.scala 32:99]
    node _T_39 = eq(io.idExeRegWrite, UInt<1>("h01")) @[JFU.scala 37:31]
    node _T_41 = neq(io.idExeRd, UInt<1>("h00")) @[JFU.scala 37:56]
    node _T_42 = and(_T_39, _T_41) @[JFU.scala 37:42]
    node _T_43 = eq(io.idExeRd, io.rs1) @[JFU.scala 37:85]
    node _T_44 = and(_T_42, _T_43) @[JFU.scala 37:71]
    when _T_44 : @[JFU.scala 37:96]
      io.fwdA <= UInt<1>("h01") @[JFU.scala 38:25]
      skip @[JFU.scala 37:96]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {main_RegOut : SInt<32>}
    
    inst control of Control @[Top.scala 18:29]
    control.clock <= clock
    control.reset <= reset
    inst regFile of RegFile @[Top.scala 19:29]
    regFile.clock <= clock
    regFile.reset <= reset
    inst immGen of ImmGen @[Top.scala 20:28]
    immGen.clock <= clock
    immGen.reset <= reset
    inst aluControl of AluControl @[Top.scala 21:32]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[Top.scala 22:25]
    alu.clock <= clock
    alu.reset <= reset
    inst Pc of PC @[Top.scala 23:24]
    Pc.clock <= clock
    Pc.reset <= reset
    inst insMem of InsMem @[Top.scala 24:28]
    insMem.clock <= clock
    insMem.reset <= reset
    inst jalr of JalrTarget @[Top.scala 25:26]
    jalr.clock <= clock
    jalr.reset <= reset
    inst dataMem of MainMem @[Top.scala 26:29]
    dataMem.clock <= clock
    dataMem.reset <= reset
    inst ifId of IF_ID @[Top.scala 27:26]
    ifId.clock <= clock
    ifId.reset <= reset
    inst idExe of ID_EXE @[Top.scala 28:27]
    idExe.clock <= clock
    idExe.reset <= reset
    inst exeMem of EXE_MEM @[Top.scala 29:28]
    exeMem.clock <= clock
    exeMem.reset <= reset
    inst memWr of MEM_WR @[Top.scala 30:27]
    memWr.clock <= clock
    memWr.reset <= reset
    inst hdu of HDU @[Top.scala 31:25]
    hdu.clock <= clock
    hdu.reset <= reset
    inst SU of StallUnit @[Top.scala 32:24]
    SU.clock <= clock
    SU.reset <= reset
    inst SFU of StoreFwdUnit @[Top.scala 33:25]
    SFU.clock <= clock
    SFU.reset <= reset
    inst BU of BranchUnit @[Top.scala 34:24]
    BU.clock <= clock
    BU.reset <= reset
    inst BFU of BranchFwdUnit @[Top.scala 35:25]
    BFU.clock <= clock
    BFU.reset <= reset
    inst JFU of JalrFwdUnit @[Top.scala 36:25]
    JFU.clock <= clock
    JFU.reset <= reset
    Pc.io.input <= Pc.io.pc4 @[Top.scala 41:21]
    node _T_7 = bits(Pc.io.pc, 11, 2) @[Top.scala 44:38]
    insMem.io.wrAdder <= _T_7 @[Top.scala 44:27]
    ifId.io.pc_in <= Pc.io.pc @[Top.scala 48:23]
    ifId.io.pc4_in <= Pc.io.pc4 @[Top.scala 49:24]
    ifId.io.ins_in <= insMem.io.rData @[Top.scala 50:24]
    node _T_8 = bits(ifId.io.ins_out, 6, 0) @[Top.scala 55:45]
    control.io.OpCode <= _T_8 @[Top.scala 55:27]
    node _T_9 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 59:42]
    regFile.io.rs1 <= _T_9 @[Top.scala 59:24]
    node _T_10 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 60:42]
    regFile.io.rs2 <= _T_10 @[Top.scala 60:24]
    immGen.io.ins <= ifId.io.ins_out @[Top.scala 64:23]
    immGen.io.PC <= ifId.io.pc_out @[Top.scala 65:22]
    aluControl.io.AluOp <= control.io.AluOp @[Top.scala 68:29]
    node _T_11 = bits(ifId.io.ins_out, 14, 12) @[Top.scala 69:47]
    aluControl.io.Func3 <= _T_11 @[Top.scala 69:29]
    node _T_12 = bits(ifId.io.ins_out, 30, 30) @[Top.scala 70:47]
    aluControl.io.Func7 <= _T_12 @[Top.scala 70:29]
    node _T_13 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 74:49]
    node _T_14 = eq(memWr.io.rd_out, _T_13) @[Top.scala 74:30]
    node _T_16 = eq(memWr.io.regWrite_out, UInt<1>("h01")) @[Top.scala 74:82]
    node _T_17 = and(_T_14, _T_16) @[Top.scala 74:57]
    node _T_18 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 74:108]
    node _T_20 = neq(_T_18, UInt<1>("h00")) @[Top.scala 74:116]
    node _T_21 = and(_T_17, _T_20) @[Top.scala 74:90]
    when _T_21 : @[Top.scala 74:125]
      idExe.io.operandA_in <= regFile.io.WriteData @[Top.scala 75:38]
      skip @[Top.scala 74:125]
    node _T_22 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 78:49]
    node _T_23 = eq(memWr.io.rd_out, _T_22) @[Top.scala 78:30]
    node _T_25 = eq(memWr.io.regWrite_out, UInt<1>("h01")) @[Top.scala 78:82]
    node _T_26 = and(_T_23, _T_25) @[Top.scala 78:57]
    node _T_27 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 78:108]
    node _T_29 = neq(_T_27, UInt<1>("h00")) @[Top.scala 78:116]
    node _T_30 = and(_T_26, _T_29) @[Top.scala 78:90]
    when _T_30 : @[Top.scala 78:124]
      idExe.io.operandB_in <= regFile.io.WriteData @[Top.scala 79:38]
      skip @[Top.scala 78:124]
    node _T_32 = eq(control.io.Operand_aSel, UInt<1>("h01")) @[Top.scala 83:38]
    when _T_32 : @[Top.scala 83:50]
      node _T_33 = asSInt(ifId.io.pc_out) @[Top.scala 84:58]
      idExe.io.operandA_in <= _T_33 @[Top.scala 84:38]
      skip @[Top.scala 83:50]
    else : @[Top.scala 85:56]
      node _T_35 = eq(control.io.Operand_aSel, UInt<2>("h02")) @[Top.scala 85:44]
      when _T_35 : @[Top.scala 85:56]
        node _T_36 = asSInt(ifId.io.pc4_out) @[Top.scala 86:59]
        idExe.io.operandA_in <= _T_36 @[Top.scala 86:38]
        skip @[Top.scala 85:56]
      else : @[Top.scala 87:20]
        idExe.io.operandA_in <= regFile.io.rd1 @[Top.scala 88:38]
        skip @[Top.scala 87:20]
    node _T_38 = eq(control.io.ExtendSel, UInt<1>("h00")) @[Top.scala 92:35]
    node _T_40 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[Top.scala 92:73]
    node _T_41 = and(_T_38, _T_40) @[Top.scala 92:47]
    when _T_41 : @[Top.scala 92:81]
      idExe.io.operandB_in <= immGen.io.I_Imm @[Top.scala 93:38]
      skip @[Top.scala 92:81]
    else : @[Top.scala 94:87]
      node _T_43 = eq(control.io.ExtendSel, UInt<1>("h01")) @[Top.scala 94:41]
      node _T_45 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[Top.scala 94:79]
      node _T_46 = and(_T_43, _T_45) @[Top.scala 94:53]
      when _T_46 : @[Top.scala 94:87]
        idExe.io.operandB_in <= immGen.io.U_Imm @[Top.scala 95:38]
        skip @[Top.scala 94:87]
      else : @[Top.scala 96:87]
        node _T_48 = eq(control.io.ExtendSel, UInt<2>("h02")) @[Top.scala 96:41]
        node _T_50 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[Top.scala 96:79]
        node _T_51 = and(_T_48, _T_50) @[Top.scala 96:53]
        when _T_51 : @[Top.scala 96:87]
          idExe.io.operandB_in <= immGen.io.S_Imm @[Top.scala 97:38]
          skip @[Top.scala 96:87]
        else : @[Top.scala 98:20]
          idExe.io.operandB_in <= regFile.io.rd2 @[Top.scala 99:38]
          skip @[Top.scala 98:20]
    node _T_53 = eq(control.io.Branch, UInt<1>("h01")) @[Top.scala 112:32]
    node _T_54 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 112:80]
    node _T_55 = eq(exeMem.io.rd_out, _T_54) @[Top.scala 112:62]
    node _T_56 = and(_T_53, _T_55) @[Top.scala 112:40]
    when _T_56 : @[Top.scala 112:90]
      idExe.io.memWrite_in <= UInt<1>("h00") @[Top.scala 114:38]
      idExe.io.memRead_in <= UInt<1>("h00") @[Top.scala 115:37]
      idExe.io.memToReg_in <= UInt<1>("h00") @[Top.scala 116:38]
      idExe.io.operandAsel_in <= UInt<1>("h00") @[Top.scala 117:41]
      idExe.io.operandBsel_in <= UInt<1>("h00") @[Top.scala 118:41]
      idExe.io.aluCtrl_in <= UInt<1>("h00") @[Top.scala 119:37]
      idExe.io.regWrite_in <= UInt<1>("h00") @[Top.scala 120:38]
      idExe.io.strData_in <= asSInt(UInt<1>("h00")) @[Top.scala 121:37]
      idExe.io.rd_in <= UInt<1>("h00") @[Top.scala 122:32]
      idExe.io.hazard_in <= UInt<1>("h00") @[Top.scala 125:36]
      idExe.io.pc_in <= UInt<1>("h00") @[Top.scala 126:32]
      idExe.io.pc4_in <= UInt<1>("h00") @[Top.scala 127:33]
      ifId.io.ins_in <= ifId.io.ins_out @[Top.scala 130:32]
      Pc.io.input <= ifId.io.pc4_out @[Top.scala 131:29]
      skip @[Top.scala 112:90]
    else : @[Top.scala 133:96]
      node _T_70 = eq(control.io.Branch, UInt<1>("h01")) @[Top.scala 133:38]
      node _T_71 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 133:86]
      node _T_72 = eq(exeMem.io.rd_out, _T_71) @[Top.scala 133:68]
      node _T_73 = and(_T_70, _T_72) @[Top.scala 133:46]
      when _T_73 : @[Top.scala 133:96]
        idExe.io.memWrite_in <= UInt<1>("h00") @[Top.scala 134:38]
        idExe.io.memRead_in <= UInt<1>("h00") @[Top.scala 135:37]
        idExe.io.memToReg_in <= UInt<1>("h00") @[Top.scala 136:38]
        idExe.io.operandAsel_in <= UInt<1>("h00") @[Top.scala 137:41]
        idExe.io.operandBsel_in <= UInt<1>("h00") @[Top.scala 138:41]
        idExe.io.aluCtrl_in <= UInt<1>("h00") @[Top.scala 139:37]
        idExe.io.regWrite_in <= UInt<1>("h00") @[Top.scala 140:38]
        idExe.io.strData_in <= asSInt(UInt<1>("h00")) @[Top.scala 141:37]
        idExe.io.rd_in <= UInt<1>("h00") @[Top.scala 142:32]
        idExe.io.hazard_in <= UInt<1>("h00") @[Top.scala 145:36]
        idExe.io.pc_in <= UInt<1>("h00") @[Top.scala 146:32]
        idExe.io.pc4_in <= UInt<1>("h00") @[Top.scala 147:33]
        ifId.io.ins_in <= ifId.io.ins_out @[Top.scala 150:32]
        Pc.io.input <= ifId.io.pc4_out @[Top.scala 151:29]
        skip @[Top.scala 133:96]
    node _T_86 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 156:38]
    BFU.io.rs1 <= _T_86 @[Top.scala 156:20]
    node _T_87 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 157:38]
    BFU.io.rs2 <= _T_87 @[Top.scala 157:20]
    BFU.io.idExeRd <= idExe.io.rd_out @[Top.scala 158:24]
    BFU.io.exeMemRd <= exeMem.io.rd_out @[Top.scala 159:25]
    BFU.io.memWrRd <= memWr.io.rd_out @[Top.scala 160:24]
    BFU.io.idExeRegWrite <= idExe.io.regWrite_out @[Top.scala 161:30]
    BFU.io.exeMemRegWrite <= exeMem.io.regWrite_out @[Top.scala 162:31]
    BFU.io.memWrRegWrite <= memWr.io.regWrite_out @[Top.scala 163:30]
    BFU.io.memMemRead <= exeMem.io.memRead_out @[Top.scala 164:27]
    node _T_89 = eq(BFU.io.fwdA, UInt<1>("h00")) @[Top.scala 171:26]
    when _T_89 : @[Top.scala 171:38]
      BU.io.rs1 <= regFile.io.rd1 @[Top.scala 172:27]
      skip @[Top.scala 171:38]
    else : @[Top.scala 173:44]
      node _T_91 = eq(BFU.io.fwdA, UInt<1>("h01")) @[Top.scala 173:32]
      when _T_91 : @[Top.scala 173:44]
        BU.io.rs1 <= alu.io.output @[Top.scala 174:27]
        skip @[Top.scala 173:44]
      else : @[Top.scala 175:44]
        node _T_93 = eq(BFU.io.fwdA, UInt<2>("h02")) @[Top.scala 175:32]
        when _T_93 : @[Top.scala 175:44]
          BU.io.rs1 <= exeMem.io.aluOutput_out @[Top.scala 176:27]
          skip @[Top.scala 175:44]
        else : @[Top.scala 177:44]
          node _T_95 = eq(BFU.io.fwdA, UInt<2>("h03")) @[Top.scala 177:32]
          when _T_95 : @[Top.scala 177:44]
            BU.io.rs1 <= memWr.io.aluOutput_out @[Top.scala 178:27]
            skip @[Top.scala 177:44]
          else : @[Top.scala 179:20]
            BU.io.rs1 <= regFile.io.rd1 @[Top.scala 180:27]
            skip @[Top.scala 179:20]
    node _T_97 = eq(BFU.io.fwdB, UInt<1>("h00")) @[Top.scala 183:26]
    when _T_97 : @[Top.scala 183:38]
      BU.io.rs2 <= regFile.io.rd2 @[Top.scala 184:27]
      skip @[Top.scala 183:38]
    else : @[Top.scala 185:45]
      node _T_99 = eq(BFU.io.fwdB, UInt<1>("h01")) @[Top.scala 185:32]
      when _T_99 : @[Top.scala 185:45]
        BU.io.rs2 <= alu.io.output @[Top.scala 186:27]
        skip @[Top.scala 185:45]
      else : @[Top.scala 187:44]
        node _T_101 = eq(BFU.io.fwdB, UInt<2>("h02")) @[Top.scala 187:32]
        when _T_101 : @[Top.scala 187:44]
          BU.io.rs2 <= exeMem.io.aluOutput_out @[Top.scala 188:27]
          skip @[Top.scala 187:44]
        else : @[Top.scala 189:44]
          node _T_103 = eq(BFU.io.fwdB, UInt<2>("h03")) @[Top.scala 189:32]
          when _T_103 : @[Top.scala 189:44]
            BU.io.rs2 <= memWr.io.aluOutput_out @[Top.scala 190:27]
            skip @[Top.scala 189:44]
          else : @[Top.scala 191:20]
            BU.io.rs2 <= regFile.io.rd2 @[Top.scala 192:27]
            skip @[Top.scala 191:20]
    BU.io.ctrlBranch <= control.io.Branch @[Top.scala 196:26]
    node _T_104 = bits(ifId.io.ins_out, 14, 12) @[Top.scala 199:39]
    BU.io.func3 <= _T_104 @[Top.scala 199:21]
    node _T_106 = eq(control.io.Branch, UInt<1>("h01")) @[Top.scala 201:32]
    when _T_106 : @[Top.scala 201:40]
      node _T_108 = eq(BU.io.branch, UInt<1>("h01")) @[Top.scala 203:35]
      when _T_108 : @[Top.scala 203:43]
        ifId.io.ins_in <= UInt<1>("h00") @[Top.scala 205:40]
        node _T_111 = eq(control.io.NextPcSel, UInt<1>("h01")) @[Top.scala 206:51]
        when _T_111 : @[Top.scala 206:63]
          node _T_112 = asUInt(immGen.io.SB_Imm) @[Top.scala 207:65]
          Pc.io.input <= _T_112 @[Top.scala 207:45]
          skip @[Top.scala 206:63]
        else : @[Top.scala 208:36]
          Pc.io.input <= Pc.io.pc4 @[Top.scala 209:45]
          skip @[Top.scala 208:36]
        skip @[Top.scala 203:43]
      else : @[Top.scala 213:28]
        skip @[Top.scala 213:28]
      skip @[Top.scala 201:40]
    else : @[Top.scala 218:20]
      Pc.io.input <= Pc.io.pc4 @[Top.scala 219:29]
      skip @[Top.scala 218:20]
    SU.io.idExeMemRead <= idExe.io.memRead_out @[Top.scala 224:28]
    SU.io.idExeRd <= idExe.io.rd_out @[Top.scala 225:23]
    node _T_113 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 226:41]
    SU.io.ifIdRs1 <= _T_113 @[Top.scala 226:23]
    node _T_114 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 227:41]
    SU.io.ifIdRs2 <= _T_114 @[Top.scala 227:23]
    node _T_115 = bits(ifId.io.ins_out, 11, 7) @[Top.scala 228:40]
    SU.io.ifIdRd <= _T_115 @[Top.scala 228:22]
    SU.io.inst_in <= ifId.io.ins_out @[Top.scala 229:23]
    SU.io.pc4_in <= ifId.io.pc4_out @[Top.scala 230:22]
    idExe.io.memWrite_in <= control.io.MemWrite @[Top.scala 235:30]
    idExe.io.memRead_in <= control.io.MemRead @[Top.scala 236:29]
    idExe.io.memToReg_in <= control.io.MemToReg @[Top.scala 237:30]
    idExe.io.operandAsel_in <= control.io.Operand_aSel @[Top.scala 238:33]
    idExe.io.operandBsel_in <= control.io.Operand_bSel @[Top.scala 239:33]
    idExe.io.aluCtrl_in <= aluControl.io.AluC @[Top.scala 240:29]
    idExe.io.regWrite_in <= control.io.RegWrite @[Top.scala 241:30]
    idExe.io.strData_in <= regFile.io.rd2 @[Top.scala 242:29]
    node _T_116 = bits(ifId.io.ins_out, 11, 7) @[Top.scala 243:42]
    idExe.io.rd_in <= _T_116 @[Top.scala 243:24]
    node _T_117 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 244:46]
    idExe.io.rs1Ins_in <= _T_117 @[Top.scala 244:28]
    node _T_118 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 245:46]
    idExe.io.rs2Ins_in <= _T_118 @[Top.scala 245:28]
    idExe.io.hazard_in <= SU.io.hazard @[Top.scala 253:28]
    idExe.io.pc_in <= ifId.io.pc_out @[Top.scala 254:24]
    idExe.io.pc4_in <= ifId.io.pc4_out @[Top.scala 255:25]
    node _T_120 = eq(SU.io.hazard, UInt<1>("h01")) @[Top.scala 257:27]
    when _T_120 : @[Top.scala 257:35]
      idExe.io.memWrite_in <= UInt<1>("h00") @[Top.scala 258:38]
      idExe.io.memRead_in <= UInt<1>("h00") @[Top.scala 259:37]
      idExe.io.memToReg_in <= UInt<1>("h00") @[Top.scala 260:38]
      idExe.io.operandAsel_in <= UInt<1>("h00") @[Top.scala 261:41]
      idExe.io.operandBsel_in <= UInt<1>("h00") @[Top.scala 262:41]
      idExe.io.aluCtrl_in <= UInt<1>("h00") @[Top.scala 263:37]
      idExe.io.regWrite_in <= UInt<1>("h00") @[Top.scala 264:38]
      idExe.io.strData_in <= asSInt(UInt<1>("h00")) @[Top.scala 265:37]
      idExe.io.rd_in <= UInt<1>("h00") @[Top.scala 266:32]
      idExe.io.hazard_in <= UInt<1>("h00") @[Top.scala 269:36]
      idExe.io.pc_in <= UInt<1>("h00") @[Top.scala 270:32]
      idExe.io.pc4_in <= UInt<1>("h00") @[Top.scala 271:33]
      ifId.io.ins_in <= ifId.io.ins_out @[Top.scala 274:32]
      Pc.io.input <= ifId.io.pc4_out @[Top.scala 275:29]
      skip @[Top.scala 257:35]
    node _T_133 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 283:37]
    SFU.io.rd <= _T_133 @[Top.scala 283:19]
    SFU.io.idExeRd <= idExe.io.rd_out @[Top.scala 284:24]
    SFU.io.exeMemRd <= exeMem.io.rd_out @[Top.scala 285:25]
    SFU.io.memWrRd <= memWr.io.rd_out @[Top.scala 286:24]
    SFU.io.idExeMemWrite <= idExe.io.regWrite_out @[Top.scala 288:30]
    SFU.io.exeMemMemWrite <= exeMem.io.regWrite_out @[Top.scala 289:31]
    SFU.io.memWrMemWrite <= memWr.io.regWrite_out @[Top.scala 290:30]
    node _T_135 = neq(exeMem.io.memRead_out, UInt<1>("h01")) @[Top.scala 292:36]
    when _T_135 : @[Top.scala 292:44]
      node _T_137 = eq(SFU.io.fwd, UInt<1>("h00")) @[Top.scala 293:33]
      when _T_137 : @[Top.scala 293:45]
        idExe.io.strData_in <= regFile.io.rd2 @[Top.scala 294:45]
        skip @[Top.scala 293:45]
      else : @[Top.scala 295:51]
        node _T_139 = eq(SFU.io.fwd, UInt<1>("h01")) @[Top.scala 295:39]
        when _T_139 : @[Top.scala 295:51]
          idExe.io.strData_in <= alu.io.output @[Top.scala 296:45]
          skip @[Top.scala 295:51]
        else : @[Top.scala 297:51]
          node _T_141 = eq(SFU.io.fwd, UInt<2>("h02")) @[Top.scala 297:39]
          when _T_141 : @[Top.scala 297:51]
            idExe.io.strData_in <= exeMem.io.aluOutput_out @[Top.scala 298:45]
            skip @[Top.scala 297:51]
          else : @[Top.scala 299:51]
            node _T_143 = eq(SFU.io.fwd, UInt<2>("h03")) @[Top.scala 299:39]
            when _T_143 : @[Top.scala 299:51]
              idExe.io.strData_in <= memWr.io.aluOutput_out @[Top.scala 300:45]
              skip @[Top.scala 299:51]
            else : @[Top.scala 301:28]
              idExe.io.strData_in <= regFile.io.rd2 @[Top.scala 302:45]
              skip @[Top.scala 301:28]
      skip @[Top.scala 292:44]
    else : @[Top.scala 304:20]
      idExe.io.strData_in <= dataMem.io.DataOut @[Top.scala 305:37]
      skip @[Top.scala 304:20]
    node _T_144 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 311:38]
    JFU.io.rs1 <= _T_144 @[Top.scala 311:20]
    JFU.io.idExeRd <= idExe.io.rd_out @[Top.scala 312:24]
    JFU.io.exeMemRd <= exeMem.io.rd_out @[Top.scala 313:25]
    JFU.io.memWrRd <= memWr.io.rd_out @[Top.scala 314:24]
    JFU.io.idExeRegWrite <= idExe.io.regWrite_out @[Top.scala 315:30]
    JFU.io.exeMemRegWrite <= exeMem.io.regWrite_out @[Top.scala 316:31]
    JFU.io.memWrRegWrite <= memWr.io.regWrite_out @[Top.scala 317:30]
    node _T_146 = eq(JFU.io.fwdA, UInt<1>("h00")) @[Top.scala 326:26]
    when _T_146 : @[Top.scala 326:38]
      jalr.io.a <= regFile.io.rd1 @[Top.scala 327:27]
      skip @[Top.scala 326:38]
    else : @[Top.scala 328:44]
      node _T_148 = eq(JFU.io.fwdA, UInt<1>("h01")) @[Top.scala 328:32]
      when _T_148 : @[Top.scala 328:44]
        jalr.io.a <= alu.io.output @[Top.scala 329:27]
        skip @[Top.scala 328:44]
      else : @[Top.scala 330:44]
        node _T_150 = eq(JFU.io.fwdA, UInt<2>("h02")) @[Top.scala 330:32]
        when _T_150 : @[Top.scala 330:44]
          jalr.io.a <= exeMem.io.aluOutput_out @[Top.scala 331:27]
          skip @[Top.scala 330:44]
        else : @[Top.scala 332:44]
          node _T_152 = eq(JFU.io.fwdA, UInt<2>("h03")) @[Top.scala 332:32]
          when _T_152 : @[Top.scala 332:44]
            jalr.io.a <= memWr.io.aluOutput_out @[Top.scala 333:27]
            skip @[Top.scala 332:44]
          else : @[Top.scala 334:20]
            jalr.io.a <= regFile.io.rd1 @[Top.scala 335:27]
            skip @[Top.scala 334:20]
    jalr.io.b <= immGen.io.I_Imm @[Top.scala 338:19]
    node _T_154 = eq(control.io.NextPcSel, UInt<2>("h03")) @[Top.scala 342:35]
    when _T_154 : @[Top.scala 342:47]
      node _T_155 = asUInt(jalr.io.output) @[Top.scala 343:47]
      Pc.io.input <= _T_155 @[Top.scala 343:29]
      ifId.io.ins_in <= UInt<1>("h00") @[Top.scala 344:32]
      ifId.io.pc_in <= UInt<1>("h00") @[Top.scala 345:31]
      ifId.io.pc4_in <= UInt<1>("h00") @[Top.scala 346:32]
      skip @[Top.scala 342:47]
    else : @[Top.scala 347:53]
      node _T_160 = eq(control.io.NextPcSel, UInt<2>("h02")) @[Top.scala 347:41]
      when _T_160 : @[Top.scala 347:53]
        node _T_161 = asUInt(immGen.io.UJ_Imm) @[Top.scala 348:49]
        Pc.io.input <= _T_161 @[Top.scala 348:29]
        ifId.io.ins_in <= UInt<1>("h00") @[Top.scala 349:32]
        ifId.io.pc_in <= UInt<1>("h00") @[Top.scala 350:31]
        ifId.io.pc4_in <= UInt<1>("h00") @[Top.scala 351:32]
        skip @[Top.scala 347:53]
    alu.io.AluControl <= idExe.io.aluCtrl_out @[Top.scala 365:27]
    hdu.io.exRegWrite <= exeMem.io.regWrite_out @[Top.scala 371:27]
    hdu.io.exRd <= exeMem.io.rd_out @[Top.scala 372:21]
    hdu.io.idRs1 <= idExe.io.rs1Ins_out @[Top.scala 373:22]
    hdu.io.idRs2 <= idExe.io.rs2Ins_out @[Top.scala 374:22]
    hdu.io.operandAsel <= idExe.io.operandAsel_out @[Top.scala 375:28]
    hdu.io.operandBsel <= idExe.io.operandBsel_out @[Top.scala 376:28]
    hdu.io.memRegWrite <= memWr.io.regWrite_out @[Top.scala 377:28]
    hdu.io.memRd <= memWr.io.rd_out @[Top.scala 378:22]
    hdu.io.hazard <= memWr.io.memToReg_out @[Top.scala 379:23]
    node _T_166 = eq(hdu.io.forwardA, UInt<1>("h00")) @[Top.scala 382:30]
    when _T_166 : @[Top.scala 382:43]
      alu.io.a <= idExe.io.operandA_out @[Top.scala 383:26]
      skip @[Top.scala 382:43]
    else : @[Top.scala 384:48]
      node _T_168 = eq(hdu.io.forwardA, UInt<1>("h01")) @[Top.scala 384:36]
      when _T_168 : @[Top.scala 384:48]
        alu.io.a <= exeMem.io.aluOutput_out @[Top.scala 385:26]
        skip @[Top.scala 384:48]
      else : @[Top.scala 386:48]
        node _T_170 = eq(hdu.io.forwardA, UInt<2>("h02")) @[Top.scala 386:36]
        when _T_170 : @[Top.scala 386:48]
          alu.io.a <= memWr.io.aluOutput_out @[Top.scala 387:26]
          skip @[Top.scala 386:48]
        else : @[Top.scala 388:20]
          alu.io.a <= idExe.io.operandA_out @[Top.scala 389:26]
          skip @[Top.scala 388:20]
    node _T_172 = eq(hdu.io.forwardB, UInt<1>("h00")) @[Top.scala 392:30]
    when _T_172 : @[Top.scala 392:43]
      alu.io.b <= idExe.io.operandB_out @[Top.scala 393:26]
      skip @[Top.scala 392:43]
    else : @[Top.scala 394:48]
      node _T_174 = eq(hdu.io.forwardB, UInt<1>("h01")) @[Top.scala 394:36]
      when _T_174 : @[Top.scala 394:48]
        alu.io.b <= exeMem.io.aluOutput_out @[Top.scala 395:26]
        skip @[Top.scala 394:48]
      else : @[Top.scala 396:48]
        node _T_176 = eq(hdu.io.forwardB, UInt<2>("h02")) @[Top.scala 396:36]
        when _T_176 : @[Top.scala 396:48]
          alu.io.b <= memWr.io.aluOutput_out @[Top.scala 397:26]
          skip @[Top.scala 396:48]
        else : @[Top.scala 398:20]
          alu.io.b <= idExe.io.operandB_out @[Top.scala 399:26]
          skip @[Top.scala 398:20]
    node _T_178 = eq(memWr.io.memToReg_out, UInt<1>("h01")) @[Top.scala 402:35]
    node _T_179 = eq(memWr.io.rd_out, idExe.io.rs1Ins_out) @[Top.scala 402:62]
    node _T_180 = and(_T_178, _T_179) @[Top.scala 402:43]
    when _T_180 : @[Top.scala 402:86]
      alu.io.a <= memWr.io.dataOut_out @[Top.scala 403:26]
      skip @[Top.scala 402:86]
    node _T_182 = eq(memWr.io.memToReg_out, UInt<1>("h01")) @[Top.scala 406:35]
    node _T_183 = eq(memWr.io.rd_out, idExe.io.rs2Ins_out) @[Top.scala 406:62]
    node _T_184 = and(_T_182, _T_183) @[Top.scala 406:43]
    when _T_184 : @[Top.scala 406:86]
      alu.io.b <= memWr.io.dataOut_out @[Top.scala 407:26]
      skip @[Top.scala 406:86]
    node _T_186 = eq(idExe.io.memWrite_out, UInt<1>("h01")) @[Top.scala 410:36]
    when _T_186 : @[Top.scala 410:44]
      alu.io.b <= idExe.io.operandB_out @[Top.scala 411:26]
      skip @[Top.scala 410:44]
    exeMem.io.memWrite_in <= idExe.io.memWrite_out @[Top.scala 419:31]
    exeMem.io.memRead_in <= idExe.io.memRead_out @[Top.scala 420:30]
    exeMem.io.memToReg_in <= idExe.io.memToReg_out @[Top.scala 421:31]
    exeMem.io.rd_in <= idExe.io.rd_out @[Top.scala 422:25]
    exeMem.io.strData_in <= idExe.io.strData_out @[Top.scala 423:30]
    exeMem.io.aluOutput_in <= alu.io.output @[Top.scala 424:32]
    exeMem.io.regWrite_in <= idExe.io.regWrite_out @[Top.scala 425:31]
    exeMem.io.rs2Sel_in <= idExe.io.rs2Ins_out @[Top.scala 426:29]
    exeMem.io.baseReg_in <= idExe.io.operandA_out @[Top.scala 427:30]
    exeMem.io.offSet_in <= idExe.io.operandB_out @[Top.scala 428:29]
    node _T_187 = asUInt(exeMem.io.aluOutput_out) @[Top.scala 433:66]
    dataMem.io.Address <= _T_187 @[Top.scala 433:28]
    dataMem.io.str <= exeMem.io.memWrite_out @[Top.scala 434:24]
    dataMem.io.ld <= exeMem.io.memRead_out @[Top.scala 435:23]
    dataMem.io.DataIn <= exeMem.io.strData_out @[Top.scala 441:27]
    memWr.io.memToReg_in <= exeMem.io.memToReg_out @[Top.scala 445:30]
    memWr.io.rd_in <= exeMem.io.rd_out @[Top.scala 446:24]
    memWr.io.aluOutput_in <= exeMem.io.aluOutput_out @[Top.scala 447:31]
    memWr.io.dataOut_in <= dataMem.io.DataOut @[Top.scala 448:29]
    memWr.io.regWrite_in <= exeMem.io.regWrite_out @[Top.scala 449:30]
    memWr.io.rs2Sel_in <= exeMem.io.rs2Sel_out @[Top.scala 450:28]
    memWr.io.baseReg_in <= exeMem.io.baseReg_out @[Top.scala 451:29]
    memWr.io.offSet_in <= exeMem.io.offSet_out @[Top.scala 452:28]
    memWr.io.MemRead_in <= exeMem.io.memRead_out @[Top.scala 453:29]
    memWr.io.memWrite_in <= exeMem.io.memWrite_out @[Top.scala 454:30]
    regFile.io.rd <= memWr.io.rd_out @[Top.scala 459:23]
    regFile.io.RegWrite <= memWr.io.regWrite_out @[Top.scala 460:29]
    node _T_189 = eq(memWr.io.memToReg_out, UInt<1>("h01")) @[Top.scala 462:36]
    when _T_189 : @[Top.scala 462:44]
      regFile.io.WriteData <= memWr.io.dataOut_out @[Top.scala 463:38]
      skip @[Top.scala 462:44]
    else : @[Top.scala 464:20]
      node _T_191 = eq(regFile.io.RegWrite, UInt<1>("h01")) @[Top.scala 465:42]
      when _T_191 : @[Top.scala 465:50]
        regFile.io.WriteData <= memWr.io.aluOutput_out @[Top.scala 466:46]
        skip @[Top.scala 465:50]
      else : @[Top.scala 467:28]
        regFile.io.WriteData <= asSInt(UInt<1>("h00")) @[Top.scala 468:46]
        skip @[Top.scala 467:28]
      skip @[Top.scala 464:20]
    io.main_RegOut <= regFile.io.WriteData @[Top.scala 472:24]
    
