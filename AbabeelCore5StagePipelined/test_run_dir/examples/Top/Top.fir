;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Top : 
  module ITD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opCode : UInt<7>, RType : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, IType : UInt<1>, Jalr : UInt<1>, Jal : UInt<1>, Lui : UInt<1>}
    
    io.RType <= UInt<1>("h00") @[ITD.scala 18:18]
    io.Load <= UInt<1>("h00") @[ITD.scala 19:17]
    io.Store <= UInt<1>("h00") @[ITD.scala 20:18]
    io.Branch <= UInt<1>("h00") @[ITD.scala 21:19]
    io.IType <= UInt<1>("h00") @[ITD.scala 22:18]
    io.Jalr <= UInt<1>("h00") @[ITD.scala 23:17]
    io.Jal <= UInt<1>("h00") @[ITD.scala 24:16]
    io.Lui <= UInt<1>("h00") @[ITD.scala 25:16]
    node _T_32 = eq(io.opCode, UInt<6>("h033")) @[ITD.scala 27:24]
    when _T_32 : @[ITD.scala 27:41]
      io.RType <= UInt<1>("h01") @[ITD.scala 28:26]
      skip @[ITD.scala 27:41]
    else : @[ITD.scala 29:47]
      node _T_35 = eq(io.opCode, UInt<2>("h03")) @[ITD.scala 29:30]
      when _T_35 : @[ITD.scala 29:47]
        io.Load <= UInt<1>("h01") @[ITD.scala 30:25]
        skip @[ITD.scala 29:47]
      else : @[ITD.scala 31:47]
        node _T_38 = eq(io.opCode, UInt<6>("h023")) @[ITD.scala 31:30]
        when _T_38 : @[ITD.scala 31:47]
          io.Store <= UInt<1>("h01") @[ITD.scala 32:26]
          skip @[ITD.scala 31:47]
        else : @[ITD.scala 33:47]
          node _T_41 = eq(io.opCode, UInt<7>("h063")) @[ITD.scala 33:30]
          when _T_41 : @[ITD.scala 33:47]
            io.Branch <= UInt<1>("h01") @[ITD.scala 34:27]
            skip @[ITD.scala 33:47]
          else : @[ITD.scala 35:47]
            node _T_44 = eq(io.opCode, UInt<5>("h013")) @[ITD.scala 35:30]
            when _T_44 : @[ITD.scala 35:47]
              io.IType <= UInt<1>("h01") @[ITD.scala 36:26]
              skip @[ITD.scala 35:47]
            else : @[ITD.scala 37:47]
              node _T_47 = eq(io.opCode, UInt<7>("h067")) @[ITD.scala 37:30]
              when _T_47 : @[ITD.scala 37:47]
                io.Jalr <= UInt<1>("h01") @[ITD.scala 38:25]
                skip @[ITD.scala 37:47]
              else : @[ITD.scala 39:47]
                node _T_50 = eq(io.opCode, UInt<7>("h06f")) @[ITD.scala 39:30]
                when _T_50 : @[ITD.scala 39:47]
                  io.Jal <= UInt<1>("h01") @[ITD.scala 40:24]
                  skip @[ITD.scala 39:47]
                else : @[ITD.scala 41:47]
                  node _T_53 = eq(io.opCode, UInt<6>("h037")) @[ITD.scala 41:30]
                  when _T_53 : @[ITD.scala 41:47]
                    io.Lui <= UInt<1>("h01") @[ITD.scala 42:24]
                    skip @[ITD.scala 41:47]
    
  module CD : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RType : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip SBType : UInt<1>, flip IType : UInt<1>, flip Jalr : UInt<1>, flip Jal : UInt<1>, flip Lui : UInt<1>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, AluOp : UInt<3>, Operand_aSel : UInt<2>, Operand_bSel : UInt<1>, ExtendSel : UInt<2>, NextPcSel : UInt<2>}
    
    io.MemWrite <= UInt<1>("h00") @[CD.scala 29:29]
    io.Branch <= UInt<1>("h00") @[CD.scala 30:27]
    io.MemRead <= UInt<1>("h00") @[CD.scala 31:28]
    io.RegWrite <= UInt<1>("h00") @[CD.scala 32:29]
    io.MemToReg <= UInt<1>("h00") @[CD.scala 33:29]
    io.AluOp <= UInt<1>("h00") @[CD.scala 34:26]
    io.Operand_aSel <= UInt<1>("h00") @[CD.scala 35:33]
    io.Operand_bSel <= UInt<1>("h00") @[CD.scala 36:33]
    io.ExtendSel <= UInt<1>("h00") @[CD.scala 37:30]
    io.NextPcSel <= UInt<1>("h00") @[CD.scala 38:30]
    node _T_52 = eq(io.RType, UInt<1>("h01")) @[CD.scala 41:31]
    when _T_52 : @[CD.scala 41:39]
      io.RegWrite <= UInt<1>("h01") @[CD.scala 42:37]
      skip @[CD.scala 41:39]
    else : @[CD.scala 43:44]
      node _T_55 = eq(io.Load, UInt<1>("h01")) @[CD.scala 43:36]
      when _T_55 : @[CD.scala 43:44]
        io.MemRead <= UInt<1>("h01") @[CD.scala 44:36]
        io.RegWrite <= UInt<1>("h01") @[CD.scala 45:37]
        io.MemToReg <= UInt<1>("h01") @[CD.scala 46:37]
        io.AluOp <= UInt<3>("h04") @[CD.scala 47:34]
        io.Operand_bSel <= UInt<1>("h01") @[CD.scala 48:41]
        skip @[CD.scala 43:44]
      else : @[CD.scala 49:45]
        node _T_62 = eq(io.Store, UInt<1>("h01")) @[CD.scala 49:37]
        when _T_62 : @[CD.scala 49:45]
          io.MemWrite <= UInt<1>("h01") @[CD.scala 50:37]
          io.AluOp <= UInt<3>("h05") @[CD.scala 51:34]
          io.Operand_bSel <= UInt<1>("h01") @[CD.scala 52:41]
          io.ExtendSel <= UInt<2>("h02") @[CD.scala 53:38]
          skip @[CD.scala 49:45]
        else : @[CD.scala 54:46]
          node _T_68 = eq(io.SBType, UInt<1>("h01")) @[CD.scala 54:38]
          when _T_68 : @[CD.scala 54:46]
            io.Branch <= UInt<1>("h01") @[CD.scala 55:35]
            io.AluOp <= UInt<2>("h02") @[CD.scala 56:34]
            io.NextPcSel <= UInt<1>("h01") @[CD.scala 57:38]
            skip @[CD.scala 54:46]
          else : @[CD.scala 58:45]
            node _T_73 = eq(io.IType, UInt<1>("h01")) @[CD.scala 58:37]
            when _T_73 : @[CD.scala 58:45]
              io.RegWrite <= UInt<1>("h01") @[CD.scala 59:37]
              io.AluOp <= UInt<1>("h01") @[CD.scala 60:34]
              io.Operand_bSel <= UInt<1>("h01") @[CD.scala 61:41]
              skip @[CD.scala 58:45]
            else : @[CD.scala 62:44]
              node _T_78 = eq(io.Jalr, UInt<1>("h01")) @[CD.scala 62:36]
              when _T_78 : @[CD.scala 62:44]
                io.RegWrite <= UInt<1>("h01") @[CD.scala 63:37]
                io.AluOp <= UInt<2>("h03") @[CD.scala 64:34]
                io.Operand_aSel <= UInt<2>("h02") @[CD.scala 65:41]
                io.NextPcSel <= UInt<2>("h03") @[CD.scala 66:38]
                skip @[CD.scala 62:44]
              else : @[CD.scala 67:43]
                node _T_84 = eq(io.Jal, UInt<1>("h01")) @[CD.scala 67:35]
                when _T_84 : @[CD.scala 67:43]
                  io.RegWrite <= UInt<1>("h01") @[CD.scala 68:37]
                  io.AluOp <= UInt<2>("h03") @[CD.scala 69:34]
                  io.Operand_aSel <= UInt<2>("h02") @[CD.scala 70:41]
                  io.NextPcSel <= UInt<2>("h02") @[CD.scala 71:38]
                  skip @[CD.scala 67:43]
                else : @[CD.scala 73:43]
                  node _T_90 = eq(io.Lui, UInt<1>("h01")) @[CD.scala 73:35]
                  when _T_90 : @[CD.scala 73:43]
                    io.RegWrite <= UInt<1>("h01") @[CD.scala 74:37]
                    io.AluOp <= UInt<3>("h06") @[CD.scala 75:34]
                    io.Operand_aSel <= UInt<2>("h03") @[CD.scala 76:41]
                    io.Operand_bSel <= UInt<1>("h01") @[CD.scala 77:41]
                    io.ExtendSel <= UInt<1>("h01") @[CD.scala 78:38]
                    skip @[CD.scala 73:43]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip OpCode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, AluOp : UInt<3>, Operand_aSel : UInt<2>, Operand_bSel : UInt<1>, ExtendSel : UInt<2>, NextPcSel : UInt<2>}
    
    inst ID of ITD @[Control.scala 21:32]
    ID.clock <= clock
    ID.reset <= reset
    inst CD of CD @[Control.scala 22:32]
    CD.clock <= clock
    CD.reset <= reset
    ID.io.opCode <= io.OpCode @[Control.scala 24:30]
    CD.io.RType <= ID.io.RType @[Control.scala 27:29]
    CD.io.Load <= ID.io.Load @[Control.scala 28:28]
    CD.io.Store <= ID.io.Store @[Control.scala 29:29]
    CD.io.SBType <= ID.io.Branch @[Control.scala 30:30]
    CD.io.IType <= ID.io.IType @[Control.scala 31:29]
    CD.io.Jalr <= ID.io.Jalr @[Control.scala 32:28]
    CD.io.Jal <= ID.io.Jal @[Control.scala 33:27]
    CD.io.Lui <= ID.io.Lui @[Control.scala 34:27]
    io.MemWrite <= CD.io.MemWrite @[Control.scala 36:29]
    io.Branch <= CD.io.Branch @[Control.scala 37:27]
    io.MemRead <= CD.io.MemRead @[Control.scala 38:28]
    io.RegWrite <= CD.io.RegWrite @[Control.scala 39:29]
    io.MemToReg <= CD.io.MemToReg @[Control.scala 40:29]
    io.AluOp <= CD.io.AluOp @[Control.scala 41:26]
    io.Operand_aSel <= CD.io.Operand_aSel @[Control.scala 42:33]
    io.Operand_bSel <= CD.io.Operand_bSel @[Control.scala 43:33]
    io.ExtendSel <= CD.io.ExtendSel @[Control.scala 44:30]
    io.NextPcSel <= CD.io.NextPcSel @[Control.scala 45:30]
    
  module RegFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip RegWrite : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rd1 : SInt<32>, rd2 : SInt<32>}
    
    reg registers : SInt<32>[32], clock @[RegFile.scala 17:28]
    registers[0] <= asSInt(UInt<1>("h00")) @[RegFile.scala 18:22]
    io.rd1 <= registers[io.rs1] @[RegFile.scala 19:16]
    io.rd2 <= registers[io.rs2] @[RegFile.scala 20:16]
    node _T_60 = eq(io.RegWrite, UInt<1>("h01")) @[RegFile.scala 21:26]
    when _T_60 : @[RegFile.scala 21:34]
      node _T_62 = eq(io.rd, UInt<1>("h00")) @[RegFile.scala 22:28]
      when _T_62 : @[RegFile.scala 22:43]
        registers[io.rd] <= asSInt(UInt<1>("h00")) @[RegFile.scala 23:42]
        skip @[RegFile.scala 22:43]
      else : @[RegFile.scala 24:28]
        registers[io.rd] <= io.WriteData @[RegFile.scala 25:42]
        skip @[RegFile.scala 24:28]
      skip @[RegFile.scala 21:34]
    
  module ImmGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ins : UInt<32>, flip PC : UInt<32>, S_Imm : SInt<32>, SB_Imm : SInt<32>, U_Imm : SInt<32>, UJ_Imm : SInt<32>, I_Imm : SInt<32>}
    
    node imm7 = bits(io.ins, 7, 7) @[ImmGen.scala 18:34]
    node imm11 = bits(io.ins, 11, 8) @[ImmGen.scala 19:35]
    node imm19 = bits(io.ins, 19, 12) @[ImmGen.scala 20:35]
    node imm20 = bits(io.ins, 20, 20) @[ImmGen.scala 21:35]
    node imm24 = bits(io.ins, 24, 21) @[ImmGen.scala 22:35]
    node imm30 = bits(io.ins, 30, 25) @[ImmGen.scala 23:35]
    node imm31 = bits(io.ins, 31, 31) @[ImmGen.scala 24:35]
    node _T_19 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_22 = mux(_T_19, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_23 = cat(imm24, imm20) @[Cat.scala 30:58]
    node _T_24 = cat(_T_22, imm31) @[Cat.scala 30:58]
    node _T_25 = cat(_T_24, imm30) @[Cat.scala 30:58]
    node _T_26 = cat(_T_25, _T_23) @[Cat.scala 30:58]
    node _T_27 = asSInt(_T_26) @[ImmGen.scala 26:73]
    io.I_Imm <= _T_27 @[ImmGen.scala 26:26]
    node _T_28 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_31 = mux(_T_28, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_32 = cat(imm11, imm7) @[Cat.scala 30:58]
    node _T_33 = cat(_T_31, imm31) @[Cat.scala 30:58]
    node _T_34 = cat(_T_33, imm30) @[Cat.scala 30:58]
    node _T_35 = cat(_T_34, _T_32) @[Cat.scala 30:58]
    node _T_36 = asSInt(_T_35) @[ImmGen.scala 27:72]
    io.S_Imm <= _T_36 @[ImmGen.scala 27:26]
    node _T_37 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_40 = mux(_T_37, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_42 = cat(imm30, imm11) @[Cat.scala 30:58]
    node _T_43 = cat(_T_42, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_44 = cat(_T_40, imm31) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, imm7) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_43) @[Cat.scala 30:58]
    node _T_47 = asSInt(_T_46) @[ImmGen.scala 28:77]
    node _T_48 = asSInt(io.PC) @[ImmGen.scala 28:92]
    node _T_49 = add(_T_47, _T_48) @[ImmGen.scala 28:84]
    node _T_50 = tail(_T_49, 1) @[ImmGen.scala 28:84]
    node _T_51 = asSInt(_T_50) @[ImmGen.scala 28:84]
    io.SB_Imm <= _T_51 @[ImmGen.scala 28:27]
    node _T_52 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_55 = mux(_T_52, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _T_56 = cat(imm24, imm20) @[Cat.scala 30:58]
    node _T_57 = cat(_T_56, imm19) @[Cat.scala 30:58]
    node _T_58 = cat(_T_55, imm31) @[Cat.scala 30:58]
    node _T_59 = cat(_T_58, imm30) @[Cat.scala 30:58]
    node _T_60 = cat(_T_59, _T_57) @[Cat.scala 30:58]
    node _T_62 = dshl(_T_60, UInt<4>("h0c")) @[ImmGen.scala 29:80]
    node _T_63 = asSInt(_T_62) @[ImmGen.scala 29:91]
    io.U_Imm <= _T_63 @[ImmGen.scala 29:26]
    node _T_64 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_67 = mux(_T_64, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_69 = cat(imm30, imm24) @[Cat.scala 30:58]
    node _T_70 = cat(_T_69, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_71 = cat(imm19, imm20) @[Cat.scala 30:58]
    node _T_72 = cat(_T_67, imm31) @[Cat.scala 30:58]
    node _T_73 = cat(_T_72, _T_71) @[Cat.scala 30:58]
    node _T_74 = cat(_T_73, _T_70) @[Cat.scala 30:58]
    node _T_75 = asSInt(_T_74) @[ImmGen.scala 30:84]
    node _T_76 = asSInt(io.PC) @[ImmGen.scala 30:99]
    node _T_77 = add(_T_75, _T_76) @[ImmGen.scala 30:91]
    node _T_78 = tail(_T_77, 1) @[ImmGen.scala 30:91]
    node _T_79 = asSInt(_T_78) @[ImmGen.scala 30:91]
    io.UJ_Imm <= _T_79 @[ImmGen.scala 30:27]
    
  module AluControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip AluOp : UInt<3>, flip Func3 : UInt<3>, flip Func7 : UInt<1>, AluC : UInt<5>}
    
    io.AluC <= UInt<1>("h00") @[AluControl.scala 16:17]
    node _T_15 = eq(io.AluOp, UInt<1>("h00")) @[AluControl.scala 18:23]
    when _T_15 : @[AluControl.scala 18:36]
      node _T_17 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
      node _T_18 = cat(_T_17, io.Func3) @[Cat.scala 30:58]
      io.AluC <= _T_18 @[AluControl.scala 19:25]
      skip @[AluControl.scala 18:36]
    else : @[AluControl.scala 20:42]
      node _T_20 = eq(io.AluOp, UInt<3>("h04")) @[AluControl.scala 20:29]
      when _T_20 : @[AluControl.scala 20:42]
        io.AluC <= UInt<1>("h00") @[AluControl.scala 21:25]
        skip @[AluControl.scala 20:42]
      else : @[AluControl.scala 22:42]
        node _T_23 = eq(io.AluOp, UInt<3>("h05")) @[AluControl.scala 22:29]
        when _T_23 : @[AluControl.scala 22:42]
          io.AluC <= UInt<1>("h00") @[AluControl.scala 23:25]
          skip @[AluControl.scala 22:42]
        else : @[AluControl.scala 24:42]
          node _T_26 = eq(io.AluOp, UInt<2>("h02")) @[AluControl.scala 24:29]
          when _T_26 : @[AluControl.scala 24:42]
            node _T_28 = cat(UInt<2>("h02"), io.Func3) @[Cat.scala 30:58]
            io.AluC <= _T_28 @[AluControl.scala 25:25]
            skip @[AluControl.scala 24:42]
          else : @[AluControl.scala 26:42]
            node _T_30 = eq(io.AluOp, UInt<1>("h01")) @[AluControl.scala 26:29]
            when _T_30 : @[AluControl.scala 26:42]
              node _T_32 = eq(io.Func3, UInt<1>("h01")) @[AluControl.scala 27:31]
              when _T_32 : @[AluControl.scala 27:44]
                node _T_34 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
                node _T_35 = cat(_T_34, io.Func3) @[Cat.scala 30:58]
                io.AluC <= _T_35 @[AluControl.scala 28:33]
                skip @[AluControl.scala 27:44]
              else : @[AluControl.scala 29:28]
                node _T_37 = cat(UInt<1>("h00"), io.Func3) @[Cat.scala 30:58]
                io.AluC <= _T_37 @[AluControl.scala 30:33]
                skip @[AluControl.scala 29:28]
              skip @[AluControl.scala 26:42]
            else : @[AluControl.scala 32:42]
              node _T_39 = eq(io.AluOp, UInt<2>("h03")) @[AluControl.scala 32:29]
              when _T_39 : @[AluControl.scala 32:42]
                io.AluC <= UInt<5>("h01f") @[AluControl.scala 33:25]
                skip @[AluControl.scala 32:42]
              else : @[AluControl.scala 34:42]
                node _T_42 = eq(io.AluOp, UInt<3>("h06")) @[AluControl.scala 34:29]
                when _T_42 : @[AluControl.scala 34:42]
                  io.AluC <= UInt<1>("h00") @[AluControl.scala 35:25]
                  skip @[AluControl.scala 34:42]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<32>, flip b : SInt<32>, flip AluControl : UInt<5>, AluBranch : UInt<1>, output : SInt<32>}
    
    io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 14:19]
    node _T_17 = eq(io.AluControl, UInt<1>("h00")) @[ALU.scala 16:28]
    when _T_17 : @[ALU.scala 16:43]
      node _T_18 = add(io.a, io.b) @[ALU.scala 17:35]
      node _T_19 = tail(_T_18, 1) @[ALU.scala 17:35]
      node _T_20 = asSInt(_T_19) @[ALU.scala 17:35]
      io.output <= _T_20 @[ALU.scala 17:27]
      skip @[ALU.scala 16:43]
    else : @[ALU.scala 18:49]
      node _T_22 = eq(io.AluControl, UInt<1>("h01")) @[ALU.scala 18:34]
      when _T_22 : @[ALU.scala 18:49]
        node _T_23 = bits(io.a, 4, 0) @[ALU.scala 19:34]
        node _T_24 = bits(io.b, 4, 0) @[ALU.scala 19:47]
        node _T_25 = dshl(_T_23, _T_24) @[ALU.scala 19:40]
        node _T_26 = asSInt(_T_25) @[ALU.scala 19:54]
        io.output <= _T_26 @[ALU.scala 19:26]
        skip @[ALU.scala 18:49]
      else : @[ALU.scala 20:49]
        node _T_28 = eq(io.AluControl, UInt<2>("h02")) @[ALU.scala 20:34]
        when _T_28 : @[ALU.scala 20:49]
          node _T_29 = lt(io.a, io.b) @[ALU.scala 21:27]
          when _T_29 : @[ALU.scala 21:34]
            io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 22:35]
            skip @[ALU.scala 21:34]
          else : @[ALU.scala 23:28]
            io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 24:35]
            skip @[ALU.scala 23:28]
          skip @[ALU.scala 20:49]
        else : @[ALU.scala 26:84]
          node _T_33 = eq(io.AluControl, UInt<2>("h03")) @[ALU.scala 26:35]
          node _T_35 = eq(io.AluControl, UInt<5>("h016")) @[ALU.scala 26:68]
          node _T_36 = or(_T_33, _T_35) @[ALU.scala 26:51]
          when _T_36 : @[ALU.scala 26:84]
            node _T_37 = asUInt(io.a) @[ALU.scala 27:31]
            node _T_38 = asUInt(io.b) @[ALU.scala 28:31]
            node _T_39 = lt(_T_37, _T_38) @[ALU.scala 29:25]
            when _T_39 : @[ALU.scala 29:30]
              io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 30:35]
              skip @[ALU.scala 29:30]
            else : @[ALU.scala 31:28]
              io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 32:35]
              skip @[ALU.scala 31:28]
            skip @[ALU.scala 26:84]
          else : @[ALU.scala 34:49]
            node _T_43 = eq(io.AluControl, UInt<3>("h04")) @[ALU.scala 34:34]
            when _T_43 : @[ALU.scala 34:49]
              node _T_44 = xor(io.a, io.b) @[ALU.scala 35:35]
              node _T_45 = asSInt(_T_44) @[ALU.scala 35:35]
              io.output <= _T_45 @[ALU.scala 35:27]
              skip @[ALU.scala 34:49]
            else : @[ALU.scala 36:49]
              node _T_47 = eq(io.AluControl, UInt<3>("h05")) @[ALU.scala 36:34]
              when _T_47 : @[ALU.scala 36:49]
                node _T_48 = bits(io.a, 4, 0) @[ALU.scala 37:32]
                node _T_49 = bits(io.b, 4, 0) @[ALU.scala 38:32]
                node _T_50 = asUInt(io.a) @[ALU.scala 39:34]
                node _T_51 = asUInt(io.b) @[ALU.scala 39:49]
                node _T_52 = dshr(_T_50, _T_51) @[ALU.scala 39:41]
                node _T_53 = asSInt(_T_52) @[ALU.scala 40:36]
                io.output <= _T_53 @[ALU.scala 40:27]
                skip @[ALU.scala 36:49]
              else : @[ALU.scala 41:49]
                node _T_55 = eq(io.AluControl, UInt<3>("h06")) @[ALU.scala 41:34]
                when _T_55 : @[ALU.scala 41:49]
                  node _T_56 = or(io.a, io.b) @[ALU.scala 42:35]
                  node _T_57 = asSInt(_T_56) @[ALU.scala 42:35]
                  io.output <= _T_57 @[ALU.scala 42:27]
                  skip @[ALU.scala 41:49]
                else : @[ALU.scala 43:49]
                  node _T_59 = eq(io.AluControl, UInt<3>("h07")) @[ALU.scala 43:34]
                  when _T_59 : @[ALU.scala 43:49]
                    node _T_60 = and(io.a, io.b) @[ALU.scala 44:35]
                    node _T_61 = asSInt(_T_60) @[ALU.scala 44:35]
                    io.output <= _T_61 @[ALU.scala 44:27]
                    skip @[ALU.scala 43:49]
                  else : @[ALU.scala 45:49]
                    node _T_63 = eq(io.AluControl, UInt<4>("h08")) @[ALU.scala 45:34]
                    when _T_63 : @[ALU.scala 45:49]
                      node _T_64 = sub(io.a, io.b) @[ALU.scala 46:35]
                      node _T_65 = tail(_T_64, 1) @[ALU.scala 46:35]
                      node _T_66 = asSInt(_T_65) @[ALU.scala 46:35]
                      io.output <= _T_66 @[ALU.scala 46:27]
                      skip @[ALU.scala 45:49]
                    else : @[ALU.scala 47:49]
                      node _T_68 = eq(io.AluControl, UInt<4>("h0d")) @[ALU.scala 47:34]
                      when _T_68 : @[ALU.scala 47:49]
                        node _T_69 = bits(io.a, 4, 0) @[ALU.scala 48:35]
                        node _T_70 = bits(io.b, 4, 0) @[ALU.scala 48:48]
                        node _T_71 = dshr(_T_69, _T_70) @[ALU.scala 48:41]
                        node _T_72 = asSInt(_T_71) @[ALU.scala 48:55]
                        io.output <= _T_72 @[ALU.scala 48:27]
                        skip @[ALU.scala 47:49]
                      else : @[ALU.scala 49:49]
                        node _T_74 = eq(io.AluControl, UInt<5>("h010")) @[ALU.scala 49:34]
                        when _T_74 : @[ALU.scala 49:49]
                          node _T_75 = eq(io.a, io.b) @[ALU.scala 50:27]
                          when _T_75 : @[ALU.scala 50:36]
                            io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 51:35]
                            skip @[ALU.scala 50:36]
                          else : @[ALU.scala 52:28]
                            io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 53:35]
                            skip @[ALU.scala 52:28]
                          skip @[ALU.scala 49:49]
                        else : @[ALU.scala 55:49]
                          node _T_79 = eq(io.AluControl, UInt<5>("h011")) @[ALU.scala 55:34]
                          when _T_79 : @[ALU.scala 55:49]
                            node _T_80 = eq(io.a, io.b) @[ALU.scala 56:27]
                            when _T_80 : @[ALU.scala 56:36]
                              io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 57:35]
                              skip @[ALU.scala 56:36]
                            else : @[ALU.scala 58:28]
                              io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 59:35]
                              skip @[ALU.scala 58:28]
                            skip @[ALU.scala 55:49]
                          else : @[ALU.scala 61:49]
                            node _T_84 = eq(io.AluControl, UInt<5>("h014")) @[ALU.scala 61:34]
                            when _T_84 : @[ALU.scala 61:49]
                              node _T_85 = lt(io.a, io.b) @[ALU.scala 62:27]
                              when _T_85 : @[ALU.scala 62:34]
                                io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 63:35]
                                skip @[ALU.scala 62:34]
                              else : @[ALU.scala 64:28]
                                io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 65:35]
                                skip @[ALU.scala 64:28]
                              skip @[ALU.scala 61:49]
                            else : @[ALU.scala 67:49]
                              node _T_89 = eq(io.AluControl, UInt<5>("h015")) @[ALU.scala 67:34]
                              when _T_89 : @[ALU.scala 67:49]
                                node _T_90 = eq(io.a, io.b) @[ALU.scala 68:28]
                                node _T_91 = gt(io.a, io.b) @[ALU.scala 68:46]
                                node _T_92 = or(_T_90, _T_91) @[ALU.scala 68:38]
                                when _T_92 : @[ALU.scala 68:54]
                                  io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 69:35]
                                  skip @[ALU.scala 68:54]
                                else : @[ALU.scala 70:28]
                                  io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 71:35]
                                  skip @[ALU.scala 70:28]
                                skip @[ALU.scala 67:49]
                              else : @[ALU.scala 73:49]
                                node _T_96 = eq(io.AluControl, UInt<5>("h017")) @[ALU.scala 73:34]
                                when _T_96 : @[ALU.scala 73:49]
                                  node _T_97 = asUInt(io.a) @[ALU.scala 74:31]
                                  node _T_98 = asUInt(io.b) @[ALU.scala 75:31]
                                  node _T_99 = eq(_T_97, _T_98) @[ALU.scala 76:26]
                                  node _T_100 = gt(_T_97, _T_98) @[ALU.scala 76:40]
                                  node _T_101 = or(_T_99, _T_100) @[ALU.scala 76:34]
                                  when _T_101 : @[ALU.scala 76:46]
                                    io.output <= asSInt(UInt<2>("h01")) @[ALU.scala 77:35]
                                    skip @[ALU.scala 76:46]
                                  else : @[ALU.scala 78:28]
                                    io.output <= asSInt(UInt<1>("h00")) @[ALU.scala 79:35]
                                    skip @[ALU.scala 78:28]
                                  skip @[ALU.scala 73:49]
                                else : @[ALU.scala 81:49]
                                  node _T_105 = eq(io.AluControl, UInt<5>("h01f")) @[ALU.scala 81:34]
                                  when _T_105 : @[ALU.scala 81:49]
                                    io.output <= io.a @[ALU.scala 82:27]
                                    skip @[ALU.scala 81:49]
    node _T_106 = bits(io.AluControl, 4, 3) @[ALU.scala 87:28]
    node _T_108 = eq(_T_106, UInt<2>("h02")) @[ALU.scala 87:34]
    node _T_110 = eq(io.output, asSInt(UInt<2>("h01"))) @[ALU.scala 87:61]
    node _T_111 = and(_T_108, _T_110) @[ALU.scala 87:47]
    when _T_111 : @[ALU.scala 87:70]
      io.AluBranch <= UInt<1>("h01") @[ALU.scala 88:30]
      skip @[ALU.scala 87:70]
    else : @[ALU.scala 89:20]
      io.AluBranch <= UInt<1>("h00") @[ALU.scala 90:30]
      skip @[ALU.scala 89:20]
    
  module PC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt, clock @[PC.scala 12:26]
    reg <= UInt<32>("h00") @[PC.scala 12:26]
    reg <= io.input @[PC.scala 13:13]
    node _T_14 = add(reg, UInt<3>("h04")) @[PC.scala 14:23]
    node _T_15 = tail(_T_14, 1) @[PC.scala 14:23]
    io.pc4 <= _T_15 @[PC.scala 14:16]
    io.pc <= reg @[PC.scala 15:15]
    
  module InsMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAdder : UInt<10>, rData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InsMem.scala 12:22]
    infer mport _T_11 = mem[io.wrAdder], clock @[InsMem.scala 13:24]
    io.rData <= _T_11 @[InsMem.scala 13:18]
    
  module MainMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Address : UInt<10>, flip DataIn : SInt<32>, DataOut : SInt<32>, flip str : UInt<1>, flip ld : UInt<1>}
    
    smem dMem : UInt<32>[1024] @[MainMem.scala 15:31]
    io.DataOut <= asSInt(UInt<1>("h00")) @[MainMem.scala 16:20]
    node _T_19 = eq(io.ld, UInt<1>("h01")) @[MainMem.scala 18:20]
    when _T_19 : @[MainMem.scala 18:28]
      infer mport _T_20 = dMem[io.Address], clock @[MainMem.scala 19:36]
      node _T_21 = asSInt(_T_20) @[MainMem.scala 19:50]
      io.DataOut <= _T_21 @[MainMem.scala 19:28]
      skip @[MainMem.scala 18:28]
    else : @[MainMem.scala 20:35]
      node _T_23 = eq(io.str, UInt<1>("h01")) @[MainMem.scala 20:27]
      when _T_23 : @[MainMem.scala 20:35]
        infer mport _T_24 = dMem[io.Address], clock @[MainMem.scala 21:21]
        node _T_25 = asUInt(io.DataIn) @[MainMem.scala 21:49]
        _T_24 <= _T_25 @[MainMem.scala 21:34]
        skip @[MainMem.scala 20:35]
    
  module IF_ID : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip ins_in : UInt<32>, pc_out : UInt<32>, ins_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 21:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 22:30]
    reg reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 23:30]
    reg_pc <= io.pc_in @[IF_ID.scala 25:16]
    reg_pc4 <= io.pc4_in @[IF_ID.scala 26:17]
    reg_ins <= io.ins_in @[IF_ID.scala 27:17]
    io.pc_out <= reg_pc @[IF_ID.scala 29:19]
    io.pc4_out <= reg_pc4 @[IF_ID.scala 30:20]
    io.ins_out <= reg_ins @[IF_ID.scala 31:20]
    
  module ID_EXE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip operandA_in : SInt<32>, flip operandB_in : SInt<32>, flip rd_in : UInt<5>, flip strData_in : SInt<32>, flip aluCtrl_in : UInt<5>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, operandA_out : SInt<32>, operandB_out : SInt<32>, rd_out : UInt<5>, strData_out : SInt<32>, aluCtrl_out : UInt<5>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 31:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 32:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EXE.scala 33:35]
    reg reg_operandA : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EXE.scala 34:35]
    reg reg_operandB : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EXE.scala 35:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EXE.scala 36:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EXE.scala 37:34]
    reg reg_aluCtrl : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EXE.scala 38:34]
    reg_memWrite <= io.memWrite_in @[ID_EXE.scala 40:22]
    reg_memRead <= io.memRead_in @[ID_EXE.scala 41:21]
    reg_memToReg <= io.memToReg_in @[ID_EXE.scala 42:22]
    reg_operandA <= io.operandA_in @[ID_EXE.scala 43:22]
    reg_operandB <= io.operandB_in @[ID_EXE.scala 44:22]
    reg_rd <= io.rd_in @[ID_EXE.scala 45:16]
    reg_strData <= io.strData_in @[ID_EXE.scala 46:21]
    reg_aluCtrl <= io.aluCtrl_in @[ID_EXE.scala 47:21]
    io.memWrite_out <= reg_memWrite @[ID_EXE.scala 50:25]
    io.memRead_out <= reg_memRead @[ID_EXE.scala 51:24]
    io.memToReg_out <= reg_memToReg @[ID_EXE.scala 52:25]
    io.operandA_out <= reg_operandA @[ID_EXE.scala 53:25]
    io.operandB_out <= reg_operandB @[ID_EXE.scala 54:25]
    io.rd_out <= reg_rd @[ID_EXE.scala 55:19]
    io.strData_out <= reg_strData @[ID_EXE.scala 56:24]
    io.aluCtrl_out <= reg_aluCtrl @[ID_EXE.scala 57:24]
    
  module EXE_MEM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip aluOutput_in : SInt<32>, flip strData_in : SInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, strData_out : SInt<32>, aluOutput_out : SInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 27:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 28:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EXE_Mem.scala 29:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EXE_Mem.scala 30:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EXE_Mem.scala 31:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EXE_Mem.scala 32:36]
    reg_memWrite <= io.memWrite_in @[EXE_Mem.scala 34:22]
    reg_memRead <= io.memRead_in @[EXE_Mem.scala 35:21]
    reg_memToReg <= io.memToReg_in @[EXE_Mem.scala 36:22]
    reg_rd <= io.rd_in @[EXE_Mem.scala 37:16]
    reg_strData <= io.strData_in @[EXE_Mem.scala 38:21]
    reg_aluOutput <= io.aluOutput_in @[EXE_Mem.scala 39:23]
    io.memWrite_out <= reg_memWrite @[EXE_Mem.scala 42:25]
    io.memRead_out <= reg_memRead @[EXE_Mem.scala 43:24]
    io.memToReg_out <= reg_memToReg @[EXE_Mem.scala 44:25]
    io.rd_out <= reg_rd @[EXE_Mem.scala 45:19]
    io.strData_out <= reg_strData @[EXE_Mem.scala 46:24]
    io.aluOutput_out <= reg_aluOutput @[EXE_Mem.scala 47:26]
    
  module MEM_WR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip dataOut_in : SInt<32>, flip aluOutput_in : SInt<32>, memToReg_out : UInt<1>, rd_out : UInt<5>, dataOut_out : SInt<32>, aluOutput_out : SInt<32>}
    
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WR.scala 23:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WR.scala 24:29]
    reg reg_dataOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WR.scala 25:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WR.scala 26:36]
    reg_memToReg <= io.memToReg_in @[Mem_WR.scala 29:22]
    reg_rd <= io.rd_in @[Mem_WR.scala 30:16]
    reg_dataOut <= io.dataOut_in @[Mem_WR.scala 31:21]
    reg_aluOutput <= io.aluOutput_in @[Mem_WR.scala 32:23]
    io.memToReg_out <= reg_memToReg @[Mem_WR.scala 35:25]
    io.rd_out <= reg_rd @[Mem_WR.scala 36:19]
    io.dataOut_out <= reg_dataOut @[Mem_WR.scala 37:24]
    io.aluOutput_out <= reg_aluOutput @[Mem_WR.scala 38:26]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {main_RegOut : SInt<32>}
    
    inst control of Control @[Top.scala 18:29]
    control.clock <= clock
    control.reset <= reset
    inst regFile of RegFile @[Top.scala 19:29]
    regFile.clock <= clock
    regFile.reset <= reset
    inst immGen of ImmGen @[Top.scala 20:28]
    immGen.clock <= clock
    immGen.reset <= reset
    inst aluControl of AluControl @[Top.scala 21:32]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[Top.scala 22:25]
    alu.clock <= clock
    alu.reset <= reset
    inst Pc of PC @[Top.scala 23:24]
    Pc.clock <= clock
    Pc.reset <= reset
    inst insMem of InsMem @[Top.scala 24:28]
    insMem.clock <= clock
    insMem.reset <= reset
    inst dataMem of MainMem @[Top.scala 26:29]
    dataMem.clock <= clock
    dataMem.reset <= reset
    inst ifId of IF_ID @[Top.scala 27:26]
    ifId.clock <= clock
    ifId.reset <= reset
    inst idExe of ID_EXE @[Top.scala 28:27]
    idExe.clock <= clock
    idExe.reset <= reset
    inst exeMem of EXE_MEM @[Top.scala 29:28]
    exeMem.clock <= clock
    exeMem.reset <= reset
    inst memWr of MEM_WR @[Top.scala 30:27]
    memWr.clock <= clock
    memWr.reset <= reset
    Pc.io.input <= Pc.io.pc4 @[Top.scala 35:21]
    node _T_7 = bits(Pc.io.pc, 11, 2) @[Top.scala 38:38]
    insMem.io.wrAdder <= _T_7 @[Top.scala 38:27]
    ifId.io.pc_in <= Pc.io.pc @[Top.scala 42:23]
    ifId.io.pc4_in <= Pc.io.pc4 @[Top.scala 43:24]
    ifId.io.ins_in <= insMem.io.rData @[Top.scala 44:24]
    node _T_8 = bits(ifId.io.ins_out, 6, 0) @[Top.scala 49:45]
    control.io.OpCode <= _T_8 @[Top.scala 49:27]
    regFile.io.RegWrite <= control.io.RegWrite @[Top.scala 52:29]
    node _T_9 = bits(ifId.io.ins_out, 19, 15) @[Top.scala 53:42]
    regFile.io.rs1 <= _T_9 @[Top.scala 53:24]
    node _T_10 = bits(ifId.io.ins_out, 24, 20) @[Top.scala 54:42]
    regFile.io.rs2 <= _T_10 @[Top.scala 54:24]
    immGen.io.ins <= ifId.io.ins_out @[Top.scala 58:23]
    immGen.io.PC <= ifId.io.pc_out @[Top.scala 59:22]
    aluControl.io.AluOp <= control.io.AluOp @[Top.scala 62:29]
    node _T_11 = bits(ifId.io.ins_out, 14, 12) @[Top.scala 63:47]
    aluControl.io.Func3 <= _T_11 @[Top.scala 63:29]
    node _T_12 = bits(ifId.io.ins_out, 30, 30) @[Top.scala 64:47]
    aluControl.io.Func7 <= _T_12 @[Top.scala 64:29]
    node _T_14 = eq(control.io.Operand_aSel, UInt<1>("h01")) @[Top.scala 67:38]
    when _T_14 : @[Top.scala 67:50]
      node _T_15 = asSInt(ifId.io.pc_out) @[Top.scala 68:58]
      idExe.io.operandA_in <= _T_15 @[Top.scala 68:38]
      skip @[Top.scala 67:50]
    else : @[Top.scala 69:56]
      node _T_17 = eq(control.io.Operand_aSel, UInt<2>("h02")) @[Top.scala 69:44]
      when _T_17 : @[Top.scala 69:56]
        node _T_18 = asSInt(ifId.io.pc4_out) @[Top.scala 70:59]
        idExe.io.operandA_in <= _T_18 @[Top.scala 70:38]
        skip @[Top.scala 69:56]
      else : @[Top.scala 71:20]
        idExe.io.operandA_in <= regFile.io.rd1 @[Top.scala 72:38]
        skip @[Top.scala 71:20]
    node _T_20 = eq(control.io.ExtendSel, UInt<1>("h00")) @[Top.scala 76:35]
    node _T_22 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[Top.scala 76:73]
    node _T_23 = and(_T_20, _T_22) @[Top.scala 76:47]
    when _T_23 : @[Top.scala 76:81]
      idExe.io.operandB_in <= immGen.io.I_Imm @[Top.scala 77:38]
      skip @[Top.scala 76:81]
    else : @[Top.scala 78:87]
      node _T_25 = eq(control.io.ExtendSel, UInt<1>("h01")) @[Top.scala 78:41]
      node _T_27 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[Top.scala 78:79]
      node _T_28 = and(_T_25, _T_27) @[Top.scala 78:53]
      when _T_28 : @[Top.scala 78:87]
        idExe.io.operandB_in <= immGen.io.S_Imm @[Top.scala 79:38]
        skip @[Top.scala 78:87]
      else : @[Top.scala 80:87]
        node _T_30 = eq(control.io.ExtendSel, UInt<2>("h02")) @[Top.scala 80:41]
        node _T_32 = eq(control.io.Operand_bSel, UInt<1>("h01")) @[Top.scala 80:79]
        node _T_33 = and(_T_30, _T_32) @[Top.scala 80:53]
        when _T_33 : @[Top.scala 80:87]
          idExe.io.operandB_in <= immGen.io.U_Imm @[Top.scala 81:38]
          skip @[Top.scala 80:87]
        else : @[Top.scala 82:20]
          idExe.io.operandB_in <= regFile.io.rd2 @[Top.scala 83:38]
          skip @[Top.scala 82:20]
    idExe.io.memWrite_in <= control.io.MemWrite @[Top.scala 88:30]
    idExe.io.memRead_in <= control.io.MemRead @[Top.scala 89:29]
    idExe.io.memToReg_in <= control.io.MemToReg @[Top.scala 90:30]
    node _T_34 = bits(ifId.io.ins_out, 11, 7) @[Top.scala 91:42]
    idExe.io.rd_in <= _T_34 @[Top.scala 91:24]
    idExe.io.strData_in <= regFile.io.rd2 @[Top.scala 92:29]
    idExe.io.aluCtrl_in <= aluControl.io.AluC @[Top.scala 93:29]
    alu.io.AluControl <= idExe.io.aluCtrl_out @[Top.scala 98:27]
    alu.io.a <= idExe.io.operandA_out @[Top.scala 99:18]
    alu.io.b <= idExe.io.operandB_out @[Top.scala 100:18]
    exeMem.io.memWrite_in <= idExe.io.memWrite_out @[Top.scala 104:31]
    exeMem.io.memRead_in <= idExe.io.memRead_out @[Top.scala 105:30]
    exeMem.io.memToReg_in <= idExe.io.memToReg_out @[Top.scala 106:31]
    exeMem.io.rd_in <= idExe.io.rd_out @[Top.scala 107:25]
    exeMem.io.strData_in <= idExe.io.strData_out @[Top.scala 108:30]
    exeMem.io.aluOutput_in <= alu.io.output @[Top.scala 109:32]
    node _T_35 = bits(exeMem.io.aluOutput_out, 9, 2) @[Top.scala 114:55]
    dataMem.io.Address <= _T_35 @[Top.scala 114:28]
    dataMem.io.str <= exeMem.io.memWrite_out @[Top.scala 115:24]
    dataMem.io.ld <= exeMem.io.memRead_out @[Top.scala 116:23]
    dataMem.io.DataIn <= exeMem.io.strData_out @[Top.scala 117:27]
    memWr.io.memToReg_in <= exeMem.io.memToReg_out @[Top.scala 121:30]
    memWr.io.rd_in <= exeMem.io.rd_out @[Top.scala 122:24]
    memWr.io.aluOutput_in <= exeMem.io.aluOutput_out @[Top.scala 123:31]
    memWr.io.dataOut_in <= dataMem.io.DataOut @[Top.scala 124:29]
    regFile.io.rd <= memWr.io.rd_out @[Top.scala 129:23]
    node _T_37 = eq(memWr.io.memToReg_out, UInt<1>("h01")) @[Top.scala 131:36]
    when _T_37 : @[Top.scala 131:44]
      regFile.io.WriteData <= memWr.io.dataOut_out @[Top.scala 132:38]
      skip @[Top.scala 131:44]
    else : @[Top.scala 133:20]
      regFile.io.WriteData <= memWr.io.aluOutput_out @[Top.scala 134:38]
      skip @[Top.scala 133:20]
    io.main_RegOut <= regFile.io.WriteData @[Top.scala 137:24]
    
